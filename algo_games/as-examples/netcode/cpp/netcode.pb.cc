// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netcode.proto

#include "netcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_dominect_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dominect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameParameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dominect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dominect_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameTurn;
}  // namespace protobuf_dominect_2eproto
namespace protobuf_dots_2dand_2dboxes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dots_2dand_2dboxes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameParameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dots_2dand_2dboxes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dots_2dand_2dboxes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameTurn;
}  // namespace protobuf_dots_2dand_2dboxes_2eproto
namespace protobuf_netcode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthPacket;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DirectChallenge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MatchIDPacket;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Nothing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netcode_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MatchmakingParameter;
}  // namespace protobuf_netcode_2eproto
namespace protobuf_nim_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nim_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameParameter;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nim_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nim_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameTurn;
}  // namespace protobuf_nim_2eproto
namespace netcode {
class AuthPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthPacket>
      _instance;
} _AuthPacket_default_instance_;
class MatchIDPacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchIDPacket>
      _instance;
} _MatchIDPacket_default_instance_;
class GetTimeoutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTimeoutResponse>
      _instance;
} _GetTimeoutResponse_default_instance_;
class SetPseudonymRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetPseudonymRequest>
      _instance;
} _SetPseudonymRequest_default_instance_;
class SetPseudonymResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetPseudonymResponse>
      _instance;
} _SetPseudonymResponse_default_instance_;
class GetUserTokenResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetUserTokenResponse>
      _instance;
} _GetUserTokenResponse_default_instance_;
class UserRegistrationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRegistrationRequest>
      _instance;
} _UserRegistrationRequest_default_instance_;
class UserRegistrationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRegistrationResponse>
      _instance;
} _UserRegistrationResponse_default_instance_;
class GroupRegistrationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupRegistrationRequest>
      _instance;
} _GroupRegistrationRequest_default_instance_;
class GroupRegistrationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupRegistrationResponse>
      _instance;
} _GroupRegistrationResponse_default_instance_;
class DirectChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectChallenge>
      _instance;
} _DirectChallenge_default_instance_;
class MatchmakingParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchmakingParameter>
      _instance;
  const ::netcode::Nothing* random_is_default_;
  const ::netcode::DirectChallenge* direct_matchmaking_;
} _MatchmakingParameter_default_instance_;
class MatchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchRequest>
      _instance;
  const ::nim::GameParameter* nim_game_parameters_;
  const ::dab::GameParameter* dab_game_parameters_;
  const ::dom::GameParameter* dom_game_parameters_;
} _MatchRequest_default_instance_;
class MatchResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchResponse>
      _instance;
} _MatchResponse_default_instance_;
class TurnRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TurnRequest>
      _instance;
  const ::nim::GameTurn* nim_game_turn_;
  const ::dab::GameTurn* dab_game_turn_;
  const ::dom::GameTurn* dom_game_turn_;
} _TurnRequest_default_instance_;
class TurnResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TurnResponse>
      _instance;
  const ::nim::GameState* nim_game_state_;
  const ::dab::GameState* dab_game_state_;
  const ::dom::GameState* dom_game_state_;
} _TurnResponse_default_instance_;
class GameStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStateResponse>
      _instance;
  const ::nim::GameState* nim_game_state_;
  const ::dab::GameState* dab_game_state_;
  const ::dom::GameState* dom_game_state_;
} _GameStateResponse_default_instance_;
class OpponentInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpponentInfoResponse>
      _instance;
} _OpponentInfoResponse_default_instance_;
class NothingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nothing>
      _instance;
} _Nothing_default_instance_;
}  // namespace netcode
namespace protobuf_netcode_2eproto {
static void InitDefaultsAuthPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_AuthPacket_default_instance_;
    new (ptr) ::netcode::AuthPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::AuthPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthPacket}, {}};

static void InitDefaultsMatchIDPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_MatchIDPacket_default_instance_;
    new (ptr) ::netcode::MatchIDPacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::MatchIDPacket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchIDPacket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchIDPacket}, {}};

static void InitDefaultsGetTimeoutResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_GetTimeoutResponse_default_instance_;
    new (ptr) ::netcode::GetTimeoutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::GetTimeoutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTimeoutResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTimeoutResponse}, {}};

static void InitDefaultsSetPseudonymRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_SetPseudonymRequest_default_instance_;
    new (ptr) ::netcode::SetPseudonymRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::SetPseudonymRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetPseudonymRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetPseudonymRequest}, {
      &protobuf_netcode_2eproto::scc_info_AuthPacket.base,}};

static void InitDefaultsSetPseudonymResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_SetPseudonymResponse_default_instance_;
    new (ptr) ::netcode::SetPseudonymResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::SetPseudonymResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetPseudonymResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetPseudonymResponse}, {}};

static void InitDefaultsGetUserTokenResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_GetUserTokenResponse_default_instance_;
    new (ptr) ::netcode::GetUserTokenResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::GetUserTokenResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetUserTokenResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetUserTokenResponse}, {}};

static void InitDefaultsUserRegistrationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_UserRegistrationRequest_default_instance_;
    new (ptr) ::netcode::UserRegistrationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::UserRegistrationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRegistrationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRegistrationRequest}, {}};

static void InitDefaultsUserRegistrationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_UserRegistrationResponse_default_instance_;
    new (ptr) ::netcode::UserRegistrationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::UserRegistrationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRegistrationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRegistrationResponse}, {}};

static void InitDefaultsGroupRegistrationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_GroupRegistrationRequest_default_instance_;
    new (ptr) ::netcode::GroupRegistrationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::GroupRegistrationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupRegistrationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupRegistrationRequest}, {
      &protobuf_netcode_2eproto::scc_info_AuthPacket.base,}};

static void InitDefaultsGroupRegistrationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_GroupRegistrationResponse_default_instance_;
    new (ptr) ::netcode::GroupRegistrationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::GroupRegistrationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GroupRegistrationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroupRegistrationResponse}, {}};

static void InitDefaultsDirectChallenge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_DirectChallenge_default_instance_;
    new (ptr) ::netcode::DirectChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::DirectChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DirectChallenge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDirectChallenge}, {}};

static void InitDefaultsMatchmakingParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_MatchmakingParameter_default_instance_;
    new (ptr) ::netcode::MatchmakingParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::MatchmakingParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MatchmakingParameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMatchmakingParameter}, {
      &protobuf_netcode_2eproto::scc_info_Nothing.base,
      &protobuf_netcode_2eproto::scc_info_DirectChallenge.base,}};

static void InitDefaultsMatchRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_MatchRequest_default_instance_;
    new (ptr) ::netcode::MatchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::MatchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MatchRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMatchRequest}, {
      &protobuf_netcode_2eproto::scc_info_MatchmakingParameter.base,
      &protobuf_nim_2eproto::scc_info_GameParameter.base,
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameParameter.base,
      &protobuf_dominect_2eproto::scc_info_GameParameter.base,}};

static void InitDefaultsMatchResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_MatchResponse_default_instance_;
    new (ptr) ::netcode::MatchResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::MatchResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchResponse}, {}};

static void InitDefaultsTurnRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_TurnRequest_default_instance_;
    new (ptr) ::netcode::TurnRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::TurnRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TurnRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTurnRequest}, {
      &protobuf_netcode_2eproto::scc_info_MatchIDPacket.base,
      &protobuf_nim_2eproto::scc_info_GameTurn.base,
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameTurn.base,
      &protobuf_dominect_2eproto::scc_info_GameTurn.base,}};

static void InitDefaultsTurnResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_TurnResponse_default_instance_;
    new (ptr) ::netcode::TurnResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::TurnResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TurnResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTurnResponse}, {
      &protobuf_nim_2eproto::scc_info_GameState.base,
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameState.base,
      &protobuf_dominect_2eproto::scc_info_GameState.base,}};

static void InitDefaultsGameStateResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_GameStateResponse_default_instance_;
    new (ptr) ::netcode::GameStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::GameStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GameStateResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGameStateResponse}, {
      &protobuf_nim_2eproto::scc_info_GameState.base,
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameState.base,
      &protobuf_dominect_2eproto::scc_info_GameState.base,}};

static void InitDefaultsOpponentInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_OpponentInfoResponse_default_instance_;
    new (ptr) ::netcode::OpponentInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::OpponentInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpponentInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpponentInfoResponse}, {}};

static void InitDefaultsNothing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netcode::_Nothing_default_instance_;
    new (ptr) ::netcode::Nothing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netcode::Nothing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Nothing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNothing}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AuthPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchIDPacket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTimeoutResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetPseudonymRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetPseudonymResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetUserTokenResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserRegistrationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserRegistrationResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupRegistrationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupRegistrationResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectChallenge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchmakingParameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TurnRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TurnResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameStateResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpponentInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nothing.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::AuthPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::AuthPacket, matr_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::AuthPacket, secret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchIDPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchIDPacket, user_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchIDPacket, match_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GetTimeoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GetTimeoutResponse, timeout_seconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::SetPseudonymRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::SetPseudonymRequest, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::SetPseudonymRequest, pseudonym_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::SetPseudonymResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::SetPseudonymResponse, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GetUserTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GetUserTokenResponse, user_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationRequest, fullname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationRequest, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationRequest, matr_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationRequest, secret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::UserRegistrationResponse, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GroupRegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GroupRegistrationRequest, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GroupRegistrationRequest, matr_number_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GroupRegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GroupRegistrationResponse, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::DirectChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::DirectChallenge, user_pseudonym_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchmakingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchmakingParameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::netcode::MatchmakingParameterDefaultTypeInternal, random_is_default_),
  offsetof(::netcode::MatchmakingParameterDefaultTypeInternal, direct_matchmaking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchmakingParameter, parameter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, user_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, game_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, matchmaking_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, timeout_suggestion_seconds_),
  offsetof(::netcode::MatchRequestDefaultTypeInternal, nim_game_parameters_),
  offsetof(::netcode::MatchRequestDefaultTypeInternal, dab_game_parameters_),
  offsetof(::netcode::MatchRequestDefaultTypeInternal, dom_game_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchRequest, game_parameters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchResponse, match_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::MatchResponse, beginning_player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnRequest, match_id_),
  offsetof(::netcode::TurnRequestDefaultTypeInternal, nim_game_turn_),
  offsetof(::netcode::TurnRequestDefaultTypeInternal, dab_game_turn_),
  offsetof(::netcode::TurnRequestDefaultTypeInternal, dom_game_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnRequest, game_turn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnResponse, turn_status_),
  offsetof(::netcode::TurnResponseDefaultTypeInternal, nim_game_state_),
  offsetof(::netcode::TurnResponseDefaultTypeInternal, dab_game_state_),
  offsetof(::netcode::TurnResponseDefaultTypeInternal, dom_game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::TurnResponse, game_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GameStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GameStateResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GameStateResponse, game_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GameStateResponse, beginning_player_),
  offsetof(::netcode::GameStateResponseDefaultTypeInternal, nim_game_state_),
  offsetof(::netcode::GameStateResponseDefaultTypeInternal, dab_game_state_),
  offsetof(::netcode::GameStateResponseDefaultTypeInternal, dom_game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::GameStateResponse, game_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::OpponentInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::OpponentInfoResponse, user_pseudonym_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::OpponentInfoResponse, group_pseudonym_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netcode::Nothing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::netcode::AuthPacket)},
  { 7, -1, sizeof(::netcode::MatchIDPacket)},
  { 14, -1, sizeof(::netcode::GetTimeoutResponse)},
  { 20, -1, sizeof(::netcode::SetPseudonymRequest)},
  { 27, -1, sizeof(::netcode::SetPseudonymResponse)},
  { 33, -1, sizeof(::netcode::GetUserTokenResponse)},
  { 39, -1, sizeof(::netcode::UserRegistrationRequest)},
  { 48, -1, sizeof(::netcode::UserRegistrationResponse)},
  { 54, -1, sizeof(::netcode::GroupRegistrationRequest)},
  { 61, -1, sizeof(::netcode::GroupRegistrationResponse)},
  { 67, -1, sizeof(::netcode::DirectChallenge)},
  { 73, -1, sizeof(::netcode::MatchmakingParameter)},
  { 81, -1, sizeof(::netcode::MatchRequest)},
  { 94, -1, sizeof(::netcode::MatchResponse)},
  { 101, -1, sizeof(::netcode::TurnRequest)},
  { 111, -1, sizeof(::netcode::TurnResponse)},
  { 121, -1, sizeof(::netcode::GameStateResponse)},
  { 132, -1, sizeof(::netcode::OpponentInfoResponse)},
  { 139, -1, sizeof(::netcode::Nothing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_AuthPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_MatchIDPacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_GetTimeoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_SetPseudonymRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_SetPseudonymResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_GetUserTokenResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_UserRegistrationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_UserRegistrationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_GroupRegistrationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_GroupRegistrationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_DirectChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_MatchmakingParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_MatchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_MatchResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_TurnRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_TurnResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_GameStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_OpponentInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netcode::_Nothing_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "netcode.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rnetcode.proto\022\007netcode\032\tnim.proto\032\024dot"
      "s-and-boxes.proto\032\016dominect.proto\"1\n\nAut"
      "hPacket\022\023\n\013matr_number\030\001 \001(\t\022\016\n\006secret\030\002"
      " \001(\t\"8\n\rMatchIDPacket\022\022\n\nuser_token\030\001 \001("
      "\t\022\023\n\013match_token\030\002 \001(\t\"-\n\022GetTimeoutResp"
      "onse\022\027\n\017timeout_seconds\030\001 \001(\r\"K\n\023SetPseu"
      "donymRequest\022!\n\004auth\030\001 \001(\0132\023.netcode.Aut"
      "hPacket\022\021\n\tpseudonym\030\002 \001(\t\"\305\001\n\024SetPseudo"
      "nymResponse\022;\n\nerror_code\030\001 \001(\0162\'.netcod"
      "e.SetPseudonymResponse.ErrorCode\"p\n\tErro"
      "rCode\022\023\n\017UNDEFINED_ERROR\020\000\022\006\n\002OK\020\001\022\024\n\020RE"
      "QUEST_REJECTED\020\002\022\020\n\014ALREADY_USED\020\003\022\014\n\010TO"
      "O_LONG\020\004\022\020\n\014EMPTY_FIELDS\020\005\"*\n\024GetUserTok"
      "enResponse\022\022\n\nuser_token\030\001 \001(\t\"_\n\027UserRe"
      "gistrationRequest\022\020\n\010fullname\030\001 \001(\t\022\r\n\005e"
      "mail\030\002 \001(\t\022\023\n\013matr_number\030\003 \001(\t\022\016\n\006secre"
      "t\030\004 \001(\t\"\277\001\n\030UserRegistrationResponse\022\?\n\n"
      "error_code\030\001 \001(\0162+.netcode.UserRegistrat"
      "ionResponse.ErrorCode\"b\n\tErrorCode\022\023\n\017UN"
      "DEFINED_ERROR\020\000\022\006\n\002OK\020\001\022\025\n\021INVALID_PARAM"
      "ETER\020\002\022\020\n\014EMPTY_FIELDS\020\003\022\017\n\013NOT_ALLOWED\020"
      "\004\"R\n\030GroupRegistrationRequest\022!\n\004auth\030\001 "
      "\001(\0132\023.netcode.AuthPacket\022\023\n\013matr_number\030"
      "\002 \003(\t\"\344\001\n\031GroupRegistrationResponse\022@\n\ne"
      "rror_code\030\001 \001(\0162,.netcode.GroupRegistrat"
      "ionResponse.ErrorCode\"\204\001\n\tErrorCode\022\023\n\017U"
      "NDEFINED_ERROR\020\000\022\006\n\002OK\020\001\022\020\n\014UNKNOWN_USER"
      "\020\002\022\032\n\026TOO_MANY_GROUP_MEMBERS\020\003\022\033\n\027USER_A"
      "LREADY_REGISTERED\020\004\022\017\n\013AUTH_FAILED\020\005\")\n\017"
      "DirectChallenge\022\026\n\016user_pseudonym\030\001 \001(\t\""
      "\212\001\n\024MatchmakingParameter\022-\n\021random_is_de"
      "fault\030\n \001(\0132\020.netcode.NothingH\000\0226\n\022direc"
      "t_matchmaking\030\013 \001(\0132\030.netcode.DirectChal"
      "lengeH\000B\013\n\tparameter\"\305\002\n\014MatchRequest\022\022\n"
      "\nuser_token\030\001 \001(\t\022\022\n\ngame_token\030\002 \001(\t\022=\n"
      "\026matchmaking_parameters\030\003 \001(\0132\035.netcode."
      "MatchmakingParameter\022\"\n\032timeout_suggesti"
      "on_seconds\030\004 \001(\r\0221\n\023nim_game_parameters\030"
      "\n \001(\0132\022.nim.GameParameterH\000\0221\n\023dab_game_"
      "parameters\030\013 \001(\0132\022.dab.GameParameterH\000\0221"
      "\n\023dom_game_parameters\030\014 \001(\0132\022.dom.GamePa"
      "rameterH\000B\021\n\017game_parameters\">\n\rMatchRes"
      "ponse\022\023\n\013match_token\030\001 \001(\t\022\030\n\020beginning_"
      "player\030\002 \001(\010\"\274\001\n\013TurnRequest\022(\n\010match_id"
      "\030\001 \001(\0132\026.netcode.MatchIDPacket\022&\n\rnim_ga"
      "me_turn\030\n \001(\0132\r.nim.GameTurnH\000\022&\n\rdab_ga"
      "me_turn\030\013 \001(\0132\r.dab.GameTurnH\000\022&\n\rdom_ga"
      "me_turn\030\014 \001(\0132\r.dom.GameTurnH\000B\013\n\tgame_t"
      "urn\"\304\001\n\014TurnResponse\022(\n\013turn_status\030\001 \001("
      "\0162\023.netcode.TurnStatus\022(\n\016nim_game_state"
      "\030\n \001(\0132\016.nim.GameStateH\000\022(\n\016dab_game_sta"
      "te\030\013 \001(\0132\016.dab.GameStateH\000\022(\n\016dom_game_s"
      "tate\030\014 \001(\0132\016.dom.GameStateH\000B\014\n\ngame_sta"
      "te\"\343\001\n\021GameStateResponse\022(\n\013game_status\030"
      "\001 \001(\0162\023.netcode.GameStatus\022\030\n\020beginning_"
      "player\030\002 \001(\010\022(\n\016nim_game_state\030\n \001(\0132\016.n"
      "im.GameStateH\000\022(\n\016dab_game_state\030\013 \001(\0132\016"
      ".dab.GameStateH\000\022(\n\016dom_game_state\030\014 \001(\013"
      "2\016.dom.GameStateH\000B\014\n\ngame_state\"G\n\024Oppo"
      "nentInfoResponse\022\026\n\016user_pseudonym\030\001 \001(\t"
      "\022\027\n\017group_pseudonym\030\002 \001(\t\"\t\n\007Nothing*I\n\n"
      "TurnStatus\022\006\n\002OK\020\000\022\020\n\014INVALID_TURN\020\001\022\021\n\r"
      "NOT_YOUR_TURN\020\002\022\016\n\nMATCH_OVER\020\003*\202\001\n\nGame"
      "Status\022\r\n\tYOUR_TURN\020\000\022\022\n\016OPPONENTS_TURN\020"
      "\001\022\r\n\tMATCH_WON\020\003\022\016\n\nMATCH_LOST\020\004\022\010\n\004DRAW"
      "\020\005\022\025\n\021MATCH_NOT_STARTED\020\006\022\021\n\rMATCH_ABORT"
      "ED\020\0072\244\006\n\007GameCom\0229\n\010NewMatch\022\025.netcode.M"
      "atchRequest\032\026.netcode.MatchResponse\0229\n\nS"
      "ubmitTurn\022\024.netcode.TurnRequest\032\025.netcod"
      "e.TurnResponse\022B\n\014GetGameState\022\026.netcode"
      ".MatchIDPacket\032\032.netcode.GameStateRespon"
      "se\022A\n\nGetTimeout\022\026.netcode.MatchIDPacket"
      "\032\033.netcode.GetTimeoutResponse\022H\n\017GetOppo"
      "nentInfo\022\026.netcode.MatchIDPacket\032\035.netco"
      "de.OpponentInfoResponse\0226\n\nAbortMatch\022\026."
      "netcode.MatchIDPacket\032\020.netcode.Nothing\022"
      "W\n\020UserRegistration\022 .netcode.UserRegist"
      "rationRequest\032!.netcode.UserRegistration"
      "Response\022Z\n\021GroupRegistration\022!.netcode."
      "GroupRegistrationRequest\032\".netcode.Group"
      "RegistrationResponse\022P\n\021SetGroupPseudony"
      "m\022\034.netcode.SetPseudonymRequest\032\035.netcod"
      "e.SetPseudonymResponse\022O\n\020SetUserPseudon"
      "ym\022\034.netcode.SetPseudonymRequest\032\035.netco"
      "de.SetPseudonymResponse\022B\n\014GetUserToken\022"
      "\023.netcode.AuthPacket\032\035.netcode.GetUserTo"
      "kenResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netcode.proto", &protobuf_RegisterTypes);
  ::protobuf_nim_2eproto::AddDescriptors();
  ::protobuf_dots_2dand_2dboxes_2eproto::AddDescriptors();
  ::protobuf_dominect_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_netcode_2eproto
namespace netcode {
const ::google::protobuf::EnumDescriptor* SetPseudonymResponse_ErrorCode_descriptor() {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netcode_2eproto::file_level_enum_descriptors[0];
}
bool SetPseudonymResponse_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::UNDEFINED_ERROR;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::OK;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::REQUEST_REJECTED;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::ALREADY_USED;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::TOO_LONG;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::EMPTY_FIELDS;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::ErrorCode_MIN;
const SetPseudonymResponse_ErrorCode SetPseudonymResponse::ErrorCode_MAX;
const int SetPseudonymResponse::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UserRegistrationResponse_ErrorCode_descriptor() {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netcode_2eproto::file_level_enum_descriptors[1];
}
bool UserRegistrationResponse_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::UNDEFINED_ERROR;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::OK;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::INVALID_PARAMETER;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::EMPTY_FIELDS;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::NOT_ALLOWED;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::ErrorCode_MIN;
const UserRegistrationResponse_ErrorCode UserRegistrationResponse::ErrorCode_MAX;
const int UserRegistrationResponse::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GroupRegistrationResponse_ErrorCode_descriptor() {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netcode_2eproto::file_level_enum_descriptors[2];
}
bool GroupRegistrationResponse_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::UNDEFINED_ERROR;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::OK;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::UNKNOWN_USER;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::TOO_MANY_GROUP_MEMBERS;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::USER_ALREADY_REGISTERED;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::AUTH_FAILED;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::ErrorCode_MIN;
const GroupRegistrationResponse_ErrorCode GroupRegistrationResponse::ErrorCode_MAX;
const int GroupRegistrationResponse::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TurnStatus_descriptor() {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netcode_2eproto::file_level_enum_descriptors[3];
}
bool TurnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameStatus_descriptor() {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netcode_2eproto::file_level_enum_descriptors[4];
}
bool GameStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AuthPacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthPacket::kMatrNumberFieldNumber;
const int AuthPacket::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthPacket::AuthPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_AuthPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.AuthPacket)
}
AuthPacket::AuthPacket(const AuthPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matr_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matr_number().size() > 0) {
    matr_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matr_number_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.AuthPacket)
}

void AuthPacket::SharedCtor() {
  matr_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthPacket::~AuthPacket() {
  // @@protoc_insertion_point(destructor:netcode.AuthPacket)
  SharedDtor();
}

void AuthPacket::SharedDtor() {
  matr_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthPacket::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthPacket& AuthPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_AuthPacket.base);
  return *internal_default_instance();
}


void AuthPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.AuthPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matr_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AuthPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.AuthPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string matr_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matr_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matr_number().data(), static_cast<int>(this->matr_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.AuthPacket.matr_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.AuthPacket.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.AuthPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.AuthPacket)
  return false;
#undef DO_
}

void AuthPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.AuthPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matr_number = 1;
  if (this->matr_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number().data(), static_cast<int>(this->matr_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.AuthPacket.matr_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->matr_number(), output);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.AuthPacket.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.AuthPacket)
}

::google::protobuf::uint8* AuthPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.AuthPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matr_number = 1;
  if (this->matr_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number().data(), static_cast<int>(this->matr_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.AuthPacket.matr_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->matr_number(), target);
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.AuthPacket.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.AuthPacket)
  return target;
}

size_t AuthPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.AuthPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string matr_number = 1;
  if (this->matr_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matr_number());
  }

  // string secret = 2;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.AuthPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.AuthPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.AuthPacket)
    MergeFrom(*source);
  }
}

void AuthPacket::MergeFrom(const AuthPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.AuthPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matr_number().size() > 0) {

    matr_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matr_number_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
}

void AuthPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.AuthPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthPacket::CopyFrom(const AuthPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.AuthPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthPacket::IsInitialized() const {
  return true;
}

void AuthPacket::Swap(AuthPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthPacket::InternalSwap(AuthPacket* other) {
  using std::swap;
  matr_number_.Swap(&other->matr_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthPacket::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchIDPacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchIDPacket::kUserTokenFieldNumber;
const int MatchIDPacket::kMatchTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchIDPacket::MatchIDPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_MatchIDPacket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.MatchIDPacket)
}
MatchIDPacket::MatchIDPacket(const MatchIDPacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_token().size() > 0) {
    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  match_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.match_token().size() > 0) {
    match_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_token_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.MatchIDPacket)
}

void MatchIDPacket::SharedCtor() {
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MatchIDPacket::~MatchIDPacket() {
  // @@protoc_insertion_point(destructor:netcode.MatchIDPacket)
  SharedDtor();
}

void MatchIDPacket::SharedDtor() {
  user_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchIDPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchIDPacket::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchIDPacket& MatchIDPacket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_MatchIDPacket.base);
  return *internal_default_instance();
}


void MatchIDPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.MatchIDPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MatchIDPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.MatchIDPacket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_token().data(), static_cast<int>(this->user_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.MatchIDPacket.user_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string match_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_token().data(), static_cast<int>(this->match_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.MatchIDPacket.match_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.MatchIDPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.MatchIDPacket)
  return false;
#undef DO_
}

void MatchIDPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.MatchIDPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchIDPacket.user_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  // string match_token = 2;
  if (this->match_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_token().data(), static_cast<int>(this->match_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchIDPacket.match_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->match_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.MatchIDPacket)
}

::google::protobuf::uint8* MatchIDPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.MatchIDPacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchIDPacket.user_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_token(), target);
  }

  // string match_token = 2;
  if (this->match_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_token().data(), static_cast<int>(this->match_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchIDPacket.match_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.MatchIDPacket)
  return target;
}

size_t MatchIDPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.MatchIDPacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_token = 1;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());
  }

  // string match_token = 2;
  if (this->match_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchIDPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.MatchIDPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchIDPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchIDPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.MatchIDPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.MatchIDPacket)
    MergeFrom(*source);
  }
}

void MatchIDPacket::MergeFrom(const MatchIDPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.MatchIDPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token().size() > 0) {

    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  if (from.match_token().size() > 0) {

    match_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_token_);
  }
}

void MatchIDPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.MatchIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchIDPacket::CopyFrom(const MatchIDPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.MatchIDPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchIDPacket::IsInitialized() const {
  return true;
}

void MatchIDPacket::Swap(MatchIDPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchIDPacket::InternalSwap(MatchIDPacket* other) {
  using std::swap;
  user_token_.Swap(&other->user_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  match_token_.Swap(&other->match_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchIDPacket::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTimeoutResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTimeoutResponse::kTimeoutSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTimeoutResponse::GetTimeoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_GetTimeoutResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.GetTimeoutResponse)
}
GetTimeoutResponse::GetTimeoutResponse(const GetTimeoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_seconds_ = from.timeout_seconds_;
  // @@protoc_insertion_point(copy_constructor:netcode.GetTimeoutResponse)
}

void GetTimeoutResponse::SharedCtor() {
  timeout_seconds_ = 0u;
}

GetTimeoutResponse::~GetTimeoutResponse() {
  // @@protoc_insertion_point(destructor:netcode.GetTimeoutResponse)
  SharedDtor();
}

void GetTimeoutResponse::SharedDtor() {
}

void GetTimeoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTimeoutResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTimeoutResponse& GetTimeoutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_GetTimeoutResponse.base);
  return *internal_default_instance();
}


void GetTimeoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.GetTimeoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_seconds_ = 0u;
  _internal_metadata_.Clear();
}

bool GetTimeoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.GetTimeoutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timeout_seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.GetTimeoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.GetTimeoutResponse)
  return false;
#undef DO_
}

void GetTimeoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.GetTimeoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeout_seconds = 1;
  if (this->timeout_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeout_seconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.GetTimeoutResponse)
}

::google::protobuf::uint8* GetTimeoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.GetTimeoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeout_seconds = 1;
  if (this->timeout_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeout_seconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.GetTimeoutResponse)
  return target;
}

size_t GetTimeoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.GetTimeoutResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 timeout_seconds = 1;
  if (this->timeout_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTimeoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.GetTimeoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTimeoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTimeoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.GetTimeoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.GetTimeoutResponse)
    MergeFrom(*source);
  }
}

void GetTimeoutResponse::MergeFrom(const GetTimeoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.GetTimeoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeout_seconds() != 0) {
    set_timeout_seconds(from.timeout_seconds());
  }
}

void GetTimeoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.GetTimeoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeoutResponse::CopyFrom(const GetTimeoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.GetTimeoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeoutResponse::IsInitialized() const {
  return true;
}

void GetTimeoutResponse::Swap(GetTimeoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTimeoutResponse::InternalSwap(GetTimeoutResponse* other) {
  using std::swap;
  swap(timeout_seconds_, other->timeout_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTimeoutResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetPseudonymRequest::InitAsDefaultInstance() {
  ::netcode::_SetPseudonymRequest_default_instance_._instance.get_mutable()->auth_ = const_cast< ::netcode::AuthPacket*>(
      ::netcode::AuthPacket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPseudonymRequest::kAuthFieldNumber;
const int SetPseudonymRequest::kPseudonymFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPseudonymRequest::SetPseudonymRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_SetPseudonymRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.SetPseudonymRequest)
}
SetPseudonymRequest::SetPseudonymRequest(const SetPseudonymRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pseudonym().size() > 0) {
    pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pseudonym_);
  }
  if (from.has_auth()) {
    auth_ = new ::netcode::AuthPacket(*from.auth_);
  } else {
    auth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:netcode.SetPseudonymRequest)
}

void SetPseudonymRequest::SharedCtor() {
  pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_ = NULL;
}

SetPseudonymRequest::~SetPseudonymRequest() {
  // @@protoc_insertion_point(destructor:netcode.SetPseudonymRequest)
  SharedDtor();
}

void SetPseudonymRequest::SharedDtor() {
  pseudonym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void SetPseudonymRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetPseudonymRequest::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetPseudonymRequest& SetPseudonymRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_SetPseudonymRequest.base);
  return *internal_default_instance();
}


void SetPseudonymRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.SetPseudonymRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pseudonym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) {
    delete auth_;
  }
  auth_ = NULL;
  _internal_metadata_.Clear();
}

bool SetPseudonymRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.SetPseudonymRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.AuthPacket auth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pseudonym = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pseudonym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pseudonym().data(), static_cast<int>(this->pseudonym().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.SetPseudonymRequest.pseudonym"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.SetPseudonymRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.SetPseudonymRequest)
  return false;
#undef DO_
}

void SetPseudonymRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.SetPseudonymRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_auth(), output);
  }

  // string pseudonym = 2;
  if (this->pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pseudonym().data(), static_cast<int>(this->pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.SetPseudonymRequest.pseudonym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pseudonym(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.SetPseudonymRequest)
}

::google::protobuf::uint8* SetPseudonymRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.SetPseudonymRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_auth(), deterministic, target);
  }

  // string pseudonym = 2;
  if (this->pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pseudonym().data(), static_cast<int>(this->pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.SetPseudonymRequest.pseudonym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pseudonym(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.SetPseudonymRequest)
  return target;
}

size_t SetPseudonymRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.SetPseudonymRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pseudonym = 2;
  if (this->pseudonym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pseudonym());
  }

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPseudonymRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.SetPseudonymRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPseudonymRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPseudonymRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.SetPseudonymRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.SetPseudonymRequest)
    MergeFrom(*source);
  }
}

void SetPseudonymRequest::MergeFrom(const SetPseudonymRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.SetPseudonymRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pseudonym().size() > 0) {

    pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pseudonym_);
  }
  if (from.has_auth()) {
    mutable_auth()->::netcode::AuthPacket::MergeFrom(from.auth());
  }
}

void SetPseudonymRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.SetPseudonymRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPseudonymRequest::CopyFrom(const SetPseudonymRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.SetPseudonymRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPseudonymRequest::IsInitialized() const {
  return true;
}

void SetPseudonymRequest::Swap(SetPseudonymRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPseudonymRequest::InternalSwap(SetPseudonymRequest* other) {
  using std::swap;
  pseudonym_.Swap(&other->pseudonym_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetPseudonymRequest::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetPseudonymResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPseudonymResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPseudonymResponse::SetPseudonymResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_SetPseudonymResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.SetPseudonymResponse)
}
SetPseudonymResponse::SetPseudonymResponse(const SetPseudonymResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:netcode.SetPseudonymResponse)
}

void SetPseudonymResponse::SharedCtor() {
  error_code_ = 0;
}

SetPseudonymResponse::~SetPseudonymResponse() {
  // @@protoc_insertion_point(destructor:netcode.SetPseudonymResponse)
  SharedDtor();
}

void SetPseudonymResponse::SharedDtor() {
}

void SetPseudonymResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetPseudonymResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetPseudonymResponse& SetPseudonymResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_SetPseudonymResponse.base);
  return *internal_default_instance();
}


void SetPseudonymResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.SetPseudonymResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool SetPseudonymResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.SetPseudonymResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.SetPseudonymResponse.ErrorCode error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::netcode::SetPseudonymResponse_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.SetPseudonymResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.SetPseudonymResponse)
  return false;
#undef DO_
}

void SetPseudonymResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.SetPseudonymResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.SetPseudonymResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.SetPseudonymResponse)
}

::google::protobuf::uint8* SetPseudonymResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.SetPseudonymResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.SetPseudonymResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.SetPseudonymResponse)
  return target;
}

size_t SetPseudonymResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.SetPseudonymResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.SetPseudonymResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPseudonymResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.SetPseudonymResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPseudonymResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPseudonymResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.SetPseudonymResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.SetPseudonymResponse)
    MergeFrom(*source);
  }
}

void SetPseudonymResponse::MergeFrom(const SetPseudonymResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.SetPseudonymResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void SetPseudonymResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.SetPseudonymResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPseudonymResponse::CopyFrom(const SetPseudonymResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.SetPseudonymResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPseudonymResponse::IsInitialized() const {
  return true;
}

void SetPseudonymResponse::Swap(SetPseudonymResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPseudonymResponse::InternalSwap(SetPseudonymResponse* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetPseudonymResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetUserTokenResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUserTokenResponse::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUserTokenResponse::GetUserTokenResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_GetUserTokenResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.GetUserTokenResponse)
}
GetUserTokenResponse::GetUserTokenResponse(const GetUserTokenResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_token().size() > 0) {
    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.GetUserTokenResponse)
}

void GetUserTokenResponse::SharedCtor() {
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetUserTokenResponse::~GetUserTokenResponse() {
  // @@protoc_insertion_point(destructor:netcode.GetUserTokenResponse)
  SharedDtor();
}

void GetUserTokenResponse::SharedDtor() {
  user_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetUserTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetUserTokenResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUserTokenResponse& GetUserTokenResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_GetUserTokenResponse.base);
  return *internal_default_instance();
}


void GetUserTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.GetUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetUserTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.GetUserTokenResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_token().data(), static_cast<int>(this->user_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.GetUserTokenResponse.user_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.GetUserTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.GetUserTokenResponse)
  return false;
#undef DO_
}

void GetUserTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.GetUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.GetUserTokenResponse.user_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.GetUserTokenResponse)
}

::google::protobuf::uint8* GetUserTokenResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.GetUserTokenResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.GetUserTokenResponse.user_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.GetUserTokenResponse)
  return target;
}

size_t GetUserTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.GetUserTokenResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_token = 1;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.GetUserTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserTokenResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUserTokenResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.GetUserTokenResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.GetUserTokenResponse)
    MergeFrom(*source);
  }
}

void GetUserTokenResponse::MergeFrom(const GetUserTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.GetUserTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token().size() > 0) {

    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
}

void GetUserTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.GetUserTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserTokenResponse::CopyFrom(const GetUserTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.GetUserTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserTokenResponse::IsInitialized() const {
  return true;
}

void GetUserTokenResponse::Swap(GetUserTokenResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserTokenResponse::InternalSwap(GetUserTokenResponse* other) {
  using std::swap;
  user_token_.Swap(&other->user_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetUserTokenResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserRegistrationRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRegistrationRequest::kFullnameFieldNumber;
const int UserRegistrationRequest::kEmailFieldNumber;
const int UserRegistrationRequest::kMatrNumberFieldNumber;
const int UserRegistrationRequest::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRegistrationRequest::UserRegistrationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_UserRegistrationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.UserRegistrationRequest)
}
UserRegistrationRequest::UserRegistrationRequest(const UserRegistrationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fullname().size() > 0) {
    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  matr_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matr_number().size() > 0) {
    matr_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matr_number_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.UserRegistrationRequest)
}

void UserRegistrationRequest::SharedCtor() {
  fullname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matr_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserRegistrationRequest::~UserRegistrationRequest() {
  // @@protoc_insertion_point(destructor:netcode.UserRegistrationRequest)
  SharedDtor();
}

void UserRegistrationRequest::SharedDtor() {
  fullname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matr_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRegistrationRequest::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRegistrationRequest& UserRegistrationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_UserRegistrationRequest.base);
  return *internal_default_instance();
}


void UserRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.UserRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fullname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matr_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserRegistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.UserRegistrationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fullname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullname().data(), static_cast<int>(this->fullname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.UserRegistrationRequest.fullname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.UserRegistrationRequest.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matr_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matr_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matr_number().data(), static_cast<int>(this->matr_number().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.UserRegistrationRequest.matr_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secret = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secret().data(), static_cast<int>(this->secret().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.UserRegistrationRequest.secret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.UserRegistrationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.UserRegistrationRequest)
  return false;
#undef DO_
}

void UserRegistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.UserRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullname = 1;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), static_cast<int>(this->fullname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.fullname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fullname(), output);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->email(), output);
  }

  // string matr_number = 3;
  if (this->matr_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number().data(), static_cast<int>(this->matr_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.matr_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matr_number(), output);
  }

  // string secret = 4;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->secret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.UserRegistrationRequest)
}

::google::protobuf::uint8* UserRegistrationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.UserRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullname = 1;
  if (this->fullname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullname().data(), static_cast<int>(this->fullname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.fullname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fullname(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  // string matr_number = 3;
  if (this->matr_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number().data(), static_cast<int>(this->matr_number().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.matr_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matr_number(), target);
  }

  // string secret = 4;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secret().data(), static_cast<int>(this->secret().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.UserRegistrationRequest.secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->secret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.UserRegistrationRequest)
  return target;
}

size_t UserRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.UserRegistrationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string fullname = 1;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullname());
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string matr_number = 3;
  if (this->matr_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matr_number());
  }

  // string secret = 4;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRegistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.UserRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRegistrationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRegistrationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.UserRegistrationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.UserRegistrationRequest)
    MergeFrom(*source);
  }
}

void UserRegistrationRequest::MergeFrom(const UserRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.UserRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.matr_number().size() > 0) {

    matr_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matr_number_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
}

void UserRegistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.UserRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRegistrationRequest::CopyFrom(const UserRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.UserRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegistrationRequest::IsInitialized() const {
  return true;
}

void UserRegistrationRequest::Swap(UserRegistrationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRegistrationRequest::InternalSwap(UserRegistrationRequest* other) {
  using std::swap;
  fullname_.Swap(&other->fullname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  matr_number_.Swap(&other->matr_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRegistrationRequest::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserRegistrationResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRegistrationResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRegistrationResponse::UserRegistrationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_UserRegistrationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.UserRegistrationResponse)
}
UserRegistrationResponse::UserRegistrationResponse(const UserRegistrationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:netcode.UserRegistrationResponse)
}

void UserRegistrationResponse::SharedCtor() {
  error_code_ = 0;
}

UserRegistrationResponse::~UserRegistrationResponse() {
  // @@protoc_insertion_point(destructor:netcode.UserRegistrationResponse)
  SharedDtor();
}

void UserRegistrationResponse::SharedDtor() {
}

void UserRegistrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRegistrationResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRegistrationResponse& UserRegistrationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_UserRegistrationResponse.base);
  return *internal_default_instance();
}


void UserRegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.UserRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool UserRegistrationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.UserRegistrationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.UserRegistrationResponse.ErrorCode error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::netcode::UserRegistrationResponse_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.UserRegistrationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.UserRegistrationResponse)
  return false;
#undef DO_
}

void UserRegistrationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.UserRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.UserRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.UserRegistrationResponse)
}

::google::protobuf::uint8* UserRegistrationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.UserRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.UserRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.UserRegistrationResponse)
  return target;
}

size_t UserRegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.UserRegistrationResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.UserRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRegistrationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.UserRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRegistrationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRegistrationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.UserRegistrationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.UserRegistrationResponse)
    MergeFrom(*source);
  }
}

void UserRegistrationResponse::MergeFrom(const UserRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.UserRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void UserRegistrationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.UserRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRegistrationResponse::CopyFrom(const UserRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.UserRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegistrationResponse::IsInitialized() const {
  return true;
}

void UserRegistrationResponse::Swap(UserRegistrationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRegistrationResponse::InternalSwap(UserRegistrationResponse* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRegistrationResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupRegistrationRequest::InitAsDefaultInstance() {
  ::netcode::_GroupRegistrationRequest_default_instance_._instance.get_mutable()->auth_ = const_cast< ::netcode::AuthPacket*>(
      ::netcode::AuthPacket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupRegistrationRequest::kAuthFieldNumber;
const int GroupRegistrationRequest::kMatrNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupRegistrationRequest::GroupRegistrationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_GroupRegistrationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.GroupRegistrationRequest)
}
GroupRegistrationRequest::GroupRegistrationRequest(const GroupRegistrationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matr_number_(from.matr_number_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth()) {
    auth_ = new ::netcode::AuthPacket(*from.auth_);
  } else {
    auth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:netcode.GroupRegistrationRequest)
}

void GroupRegistrationRequest::SharedCtor() {
  auth_ = NULL;
}

GroupRegistrationRequest::~GroupRegistrationRequest() {
  // @@protoc_insertion_point(destructor:netcode.GroupRegistrationRequest)
  SharedDtor();
}

void GroupRegistrationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
}

void GroupRegistrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupRegistrationRequest::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupRegistrationRequest& GroupRegistrationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_GroupRegistrationRequest.base);
  return *internal_default_instance();
}


void GroupRegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.GroupRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matr_number_.Clear();
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) {
    delete auth_;
  }
  auth_ = NULL;
  _internal_metadata_.Clear();
}

bool GroupRegistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.GroupRegistrationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.AuthPacket auth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string matr_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_matr_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matr_number(this->matr_number_size() - 1).data(),
            static_cast<int>(this->matr_number(this->matr_number_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.GroupRegistrationRequest.matr_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.GroupRegistrationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.GroupRegistrationRequest)
  return false;
#undef DO_
}

void GroupRegistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.GroupRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_auth(), output);
  }

  // repeated string matr_number = 2;
  for (int i = 0, n = this->matr_number_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number(i).data(), static_cast<int>(this->matr_number(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.GroupRegistrationRequest.matr_number");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->matr_number(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.GroupRegistrationRequest)
}

::google::protobuf::uint8* GroupRegistrationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.GroupRegistrationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_auth(), deterministic, target);
  }

  // repeated string matr_number = 2;
  for (int i = 0, n = this->matr_number_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matr_number(i).data(), static_cast<int>(this->matr_number(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.GroupRegistrationRequest.matr_number");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->matr_number(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.GroupRegistrationRequest)
  return target;
}

size_t GroupRegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.GroupRegistrationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string matr_number = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->matr_number_size());
  for (int i = 0, n = this->matr_number_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->matr_number(i));
  }

  // .netcode.AuthPacket auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupRegistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.GroupRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupRegistrationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupRegistrationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.GroupRegistrationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.GroupRegistrationRequest)
    MergeFrom(*source);
  }
}

void GroupRegistrationRequest::MergeFrom(const GroupRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.GroupRegistrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matr_number_.MergeFrom(from.matr_number_);
  if (from.has_auth()) {
    mutable_auth()->::netcode::AuthPacket::MergeFrom(from.auth());
  }
}

void GroupRegistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.GroupRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRegistrationRequest::CopyFrom(const GroupRegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.GroupRegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRegistrationRequest::IsInitialized() const {
  return true;
}

void GroupRegistrationRequest::Swap(GroupRegistrationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupRegistrationRequest::InternalSwap(GroupRegistrationRequest* other) {
  using std::swap;
  matr_number_.InternalSwap(CastToBase(&other->matr_number_));
  swap(auth_, other->auth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupRegistrationRequest::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroupRegistrationResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupRegistrationResponse::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupRegistrationResponse::GroupRegistrationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_GroupRegistrationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.GroupRegistrationResponse)
}
GroupRegistrationResponse::GroupRegistrationResponse(const GroupRegistrationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:netcode.GroupRegistrationResponse)
}

void GroupRegistrationResponse::SharedCtor() {
  error_code_ = 0;
}

GroupRegistrationResponse::~GroupRegistrationResponse() {
  // @@protoc_insertion_point(destructor:netcode.GroupRegistrationResponse)
  SharedDtor();
}

void GroupRegistrationResponse::SharedDtor() {
}

void GroupRegistrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GroupRegistrationResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupRegistrationResponse& GroupRegistrationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_GroupRegistrationResponse.base);
  return *internal_default_instance();
}


void GroupRegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.GroupRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool GroupRegistrationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.GroupRegistrationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.GroupRegistrationResponse.ErrorCode error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::netcode::GroupRegistrationResponse_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.GroupRegistrationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.GroupRegistrationResponse)
  return false;
#undef DO_
}

void GroupRegistrationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.GroupRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.GroupRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.GroupRegistrationResponse)
}

::google::protobuf::uint8* GroupRegistrationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.GroupRegistrationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.GroupRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.GroupRegistrationResponse)
  return target;
}

size_t GroupRegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.GroupRegistrationResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.GroupRegistrationResponse.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupRegistrationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.GroupRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupRegistrationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupRegistrationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.GroupRegistrationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.GroupRegistrationResponse)
    MergeFrom(*source);
  }
}

void GroupRegistrationResponse::MergeFrom(const GroupRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.GroupRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void GroupRegistrationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.GroupRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRegistrationResponse::CopyFrom(const GroupRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.GroupRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRegistrationResponse::IsInitialized() const {
  return true;
}

void GroupRegistrationResponse::Swap(GroupRegistrationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupRegistrationResponse::InternalSwap(GroupRegistrationResponse* other) {
  using std::swap;
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GroupRegistrationResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DirectChallenge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectChallenge::kUserPseudonymFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectChallenge::DirectChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_DirectChallenge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.DirectChallenge)
}
DirectChallenge::DirectChallenge(const DirectChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_pseudonym().size() > 0) {
    user_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pseudonym_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.DirectChallenge)
}

void DirectChallenge::SharedCtor() {
  user_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DirectChallenge::~DirectChallenge() {
  // @@protoc_insertion_point(destructor:netcode.DirectChallenge)
  SharedDtor();
}

void DirectChallenge::SharedDtor() {
  user_pseudonym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DirectChallenge::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectChallenge& DirectChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_DirectChallenge.base);
  return *internal_default_instance();
}


void DirectChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.DirectChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_pseudonym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DirectChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.DirectChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_pseudonym = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_pseudonym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.DirectChallenge.user_pseudonym"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.DirectChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.DirectChallenge)
  return false;
#undef DO_
}

void DirectChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.DirectChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.DirectChallenge.user_pseudonym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_pseudonym(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.DirectChallenge)
}

::google::protobuf::uint8* DirectChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.DirectChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.DirectChallenge.user_pseudonym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_pseudonym(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.DirectChallenge)
  return target;
}

size_t DirectChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.DirectChallenge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_pseudonym());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.DirectChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.DirectChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.DirectChallenge)
    MergeFrom(*source);
  }
}

void DirectChallenge::MergeFrom(const DirectChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.DirectChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_pseudonym().size() > 0) {

    user_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pseudonym_);
  }
}

void DirectChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.DirectChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectChallenge::CopyFrom(const DirectChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.DirectChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectChallenge::IsInitialized() const {
  return true;
}

void DirectChallenge::Swap(DirectChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectChallenge::InternalSwap(DirectChallenge* other) {
  using std::swap;
  user_pseudonym_.Swap(&other->user_pseudonym_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DirectChallenge::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchmakingParameter::InitAsDefaultInstance() {
  ::netcode::_MatchmakingParameter_default_instance_.random_is_default_ = const_cast< ::netcode::Nothing*>(
      ::netcode::Nothing::internal_default_instance());
  ::netcode::_MatchmakingParameter_default_instance_.direct_matchmaking_ = const_cast< ::netcode::DirectChallenge*>(
      ::netcode::DirectChallenge::internal_default_instance());
}
void MatchmakingParameter::set_allocated_random_is_default(::netcode::Nothing* random_is_default) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_parameter();
  if (random_is_default) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      random_is_default = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, random_is_default, submessage_arena);
    }
    set_has_random_is_default();
    parameter_.random_is_default_ = random_is_default;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.MatchmakingParameter.random_is_default)
}
void MatchmakingParameter::set_allocated_direct_matchmaking(::netcode::DirectChallenge* direct_matchmaking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_parameter();
  if (direct_matchmaking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direct_matchmaking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direct_matchmaking, submessage_arena);
    }
    set_has_direct_matchmaking();
    parameter_.direct_matchmaking_ = direct_matchmaking;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.MatchmakingParameter.direct_matchmaking)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchmakingParameter::kRandomIsDefaultFieldNumber;
const int MatchmakingParameter::kDirectMatchmakingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchmakingParameter::MatchmakingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_MatchmakingParameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.MatchmakingParameter)
}
MatchmakingParameter::MatchmakingParameter(const MatchmakingParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_parameter();
  switch (from.parameter_case()) {
    case kRandomIsDefault: {
      mutable_random_is_default()->::netcode::Nothing::MergeFrom(from.random_is_default());
      break;
    }
    case kDirectMatchmaking: {
      mutable_direct_matchmaking()->::netcode::DirectChallenge::MergeFrom(from.direct_matchmaking());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:netcode.MatchmakingParameter)
}

void MatchmakingParameter::SharedCtor() {
  clear_has_parameter();
}

MatchmakingParameter::~MatchmakingParameter() {
  // @@protoc_insertion_point(destructor:netcode.MatchmakingParameter)
  SharedDtor();
}

void MatchmakingParameter::SharedDtor() {
  if (has_parameter()) {
    clear_parameter();
  }
}

void MatchmakingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchmakingParameter::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchmakingParameter& MatchmakingParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_MatchmakingParameter.base);
  return *internal_default_instance();
}


void MatchmakingParameter::clear_parameter() {
// @@protoc_insertion_point(one_of_clear_start:netcode.MatchmakingParameter)
  switch (parameter_case()) {
    case kRandomIsDefault: {
      delete parameter_.random_is_default_;
      break;
    }
    case kDirectMatchmaking: {
      delete parameter_.direct_matchmaking_;
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETER_NOT_SET;
}


void MatchmakingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.MatchmakingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameter();
  _internal_metadata_.Clear();
}

bool MatchmakingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.MatchmakingParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.Nothing random_is_default = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_random_is_default()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netcode.DirectChallenge direct_matchmaking = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direct_matchmaking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.MatchmakingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.MatchmakingParameter)
  return false;
#undef DO_
}

void MatchmakingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.MatchmakingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.Nothing random_is_default = 10;
  if (has_random_is_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_random_is_default(), output);
  }

  // .netcode.DirectChallenge direct_matchmaking = 11;
  if (has_direct_matchmaking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_direct_matchmaking(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.MatchmakingParameter)
}

::google::protobuf::uint8* MatchmakingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.MatchmakingParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.Nothing random_is_default = 10;
  if (has_random_is_default()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_random_is_default(), deterministic, target);
  }

  // .netcode.DirectChallenge direct_matchmaking = 11;
  if (has_direct_matchmaking()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_direct_matchmaking(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.MatchmakingParameter)
  return target;
}

size_t MatchmakingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.MatchmakingParameter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (parameter_case()) {
    // .netcode.Nothing random_is_default = 10;
    case kRandomIsDefault: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parameter_.random_is_default_);
      break;
    }
    // .netcode.DirectChallenge direct_matchmaking = 11;
    case kDirectMatchmaking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parameter_.direct_matchmaking_);
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchmakingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.MatchmakingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchmakingParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchmakingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.MatchmakingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.MatchmakingParameter)
    MergeFrom(*source);
  }
}

void MatchmakingParameter::MergeFrom(const MatchmakingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.MatchmakingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameter_case()) {
    case kRandomIsDefault: {
      mutable_random_is_default()->::netcode::Nothing::MergeFrom(from.random_is_default());
      break;
    }
    case kDirectMatchmaking: {
      mutable_direct_matchmaking()->::netcode::DirectChallenge::MergeFrom(from.direct_matchmaking());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
}

void MatchmakingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.MatchmakingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchmakingParameter::CopyFrom(const MatchmakingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.MatchmakingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchmakingParameter::IsInitialized() const {
  return true;
}

void MatchmakingParameter::Swap(MatchmakingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchmakingParameter::InternalSwap(MatchmakingParameter* other) {
  using std::swap;
  swap(parameter_, other->parameter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchmakingParameter::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchRequest::InitAsDefaultInstance() {
  ::netcode::_MatchRequest_default_instance_._instance.get_mutable()->matchmaking_parameters_ = const_cast< ::netcode::MatchmakingParameter*>(
      ::netcode::MatchmakingParameter::internal_default_instance());
  ::netcode::_MatchRequest_default_instance_.nim_game_parameters_ = const_cast< ::nim::GameParameter*>(
      ::nim::GameParameter::internal_default_instance());
  ::netcode::_MatchRequest_default_instance_.dab_game_parameters_ = const_cast< ::dab::GameParameter*>(
      ::dab::GameParameter::internal_default_instance());
  ::netcode::_MatchRequest_default_instance_.dom_game_parameters_ = const_cast< ::dom::GameParameter*>(
      ::dom::GameParameter::internal_default_instance());
}
void MatchRequest::set_allocated_nim_game_parameters(::nim::GameParameter* nim_game_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_parameters();
  if (nim_game_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nim_game_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nim_game_parameters, submessage_arena);
    }
    set_has_nim_game_parameters();
    game_parameters_.nim_game_parameters_ = nim_game_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.MatchRequest.nim_game_parameters)
}
void MatchRequest::clear_nim_game_parameters() {
  if (has_nim_game_parameters()) {
    delete game_parameters_.nim_game_parameters_;
    clear_has_game_parameters();
  }
}
void MatchRequest::set_allocated_dab_game_parameters(::dab::GameParameter* dab_game_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_parameters();
  if (dab_game_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dab_game_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dab_game_parameters, submessage_arena);
    }
    set_has_dab_game_parameters();
    game_parameters_.dab_game_parameters_ = dab_game_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.MatchRequest.dab_game_parameters)
}
void MatchRequest::clear_dab_game_parameters() {
  if (has_dab_game_parameters()) {
    delete game_parameters_.dab_game_parameters_;
    clear_has_game_parameters();
  }
}
void MatchRequest::set_allocated_dom_game_parameters(::dom::GameParameter* dom_game_parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_parameters();
  if (dom_game_parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dom_game_parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dom_game_parameters, submessage_arena);
    }
    set_has_dom_game_parameters();
    game_parameters_.dom_game_parameters_ = dom_game_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.MatchRequest.dom_game_parameters)
}
void MatchRequest::clear_dom_game_parameters() {
  if (has_dom_game_parameters()) {
    delete game_parameters_.dom_game_parameters_;
    clear_has_game_parameters();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchRequest::kUserTokenFieldNumber;
const int MatchRequest::kGameTokenFieldNumber;
const int MatchRequest::kMatchmakingParametersFieldNumber;
const int MatchRequest::kTimeoutSuggestionSecondsFieldNumber;
const int MatchRequest::kNimGameParametersFieldNumber;
const int MatchRequest::kDabGameParametersFieldNumber;
const int MatchRequest::kDomGameParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchRequest::MatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_MatchRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.MatchRequest)
}
MatchRequest::MatchRequest(const MatchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_token().size() > 0) {
    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  game_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_token().size() > 0) {
    game_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_token_);
  }
  if (from.has_matchmaking_parameters()) {
    matchmaking_parameters_ = new ::netcode::MatchmakingParameter(*from.matchmaking_parameters_);
  } else {
    matchmaking_parameters_ = NULL;
  }
  timeout_suggestion_seconds_ = from.timeout_suggestion_seconds_;
  clear_has_game_parameters();
  switch (from.game_parameters_case()) {
    case kNimGameParameters: {
      mutable_nim_game_parameters()->::nim::GameParameter::MergeFrom(from.nim_game_parameters());
      break;
    }
    case kDabGameParameters: {
      mutable_dab_game_parameters()->::dab::GameParameter::MergeFrom(from.dab_game_parameters());
      break;
    }
    case kDomGameParameters: {
      mutable_dom_game_parameters()->::dom::GameParameter::MergeFrom(from.dom_game_parameters());
      break;
    }
    case GAME_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:netcode.MatchRequest)
}

void MatchRequest::SharedCtor() {
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&matchmaking_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_suggestion_seconds_) -
      reinterpret_cast<char*>(&matchmaking_parameters_)) + sizeof(timeout_suggestion_seconds_));
  clear_has_game_parameters();
}

MatchRequest::~MatchRequest() {
  // @@protoc_insertion_point(destructor:netcode.MatchRequest)
  SharedDtor();
}

void MatchRequest::SharedDtor() {
  user_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete matchmaking_parameters_;
  if (has_game_parameters()) {
    clear_game_parameters();
  }
}

void MatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchRequest::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchRequest& MatchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_MatchRequest.base);
  return *internal_default_instance();
}


void MatchRequest::clear_game_parameters() {
// @@protoc_insertion_point(one_of_clear_start:netcode.MatchRequest)
  switch (game_parameters_case()) {
    case kNimGameParameters: {
      delete game_parameters_.nim_game_parameters_;
      break;
    }
    case kDabGameParameters: {
      delete game_parameters_.dab_game_parameters_;
      break;
    }
    case kDomGameParameters: {
      delete game_parameters_.dom_game_parameters_;
      break;
    }
    case GAME_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAME_PARAMETERS_NOT_SET;
}


void MatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.MatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && matchmaking_parameters_ != NULL) {
    delete matchmaking_parameters_;
  }
  matchmaking_parameters_ = NULL;
  timeout_suggestion_seconds_ = 0u;
  clear_game_parameters();
  _internal_metadata_.Clear();
}

bool MatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.MatchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_token().data(), static_cast<int>(this->user_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.MatchRequest.user_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string game_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_token().data(), static_cast<int>(this->game_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.MatchRequest.game_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netcode.MatchmakingParameter matchmaking_parameters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_matchmaking_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout_suggestion_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_suggestion_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nim.GameParameter nim_game_parameters = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nim_game_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dab.GameParameter dab_game_parameters = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dab_game_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dom.GameParameter dom_game_parameters = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dom_game_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.MatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.MatchRequest)
  return false;
#undef DO_
}

void MatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.MatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchRequest.user_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  // string game_token = 2;
  if (this->game_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_token().data(), static_cast<int>(this->game_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchRequest.game_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_token(), output);
  }

  // .netcode.MatchmakingParameter matchmaking_parameters = 3;
  if (this->has_matchmaking_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_matchmaking_parameters(), output);
  }

  // uint32 timeout_suggestion_seconds = 4;
  if (this->timeout_suggestion_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout_suggestion_seconds(), output);
  }

  // .nim.GameParameter nim_game_parameters = 10;
  if (has_nim_game_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_nim_game_parameters(), output);
  }

  // .dab.GameParameter dab_game_parameters = 11;
  if (has_dab_game_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_dab_game_parameters(), output);
  }

  // .dom.GameParameter dom_game_parameters = 12;
  if (has_dom_game_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_dom_game_parameters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.MatchRequest)
}

::google::protobuf::uint8* MatchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.MatchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), static_cast<int>(this->user_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchRequest.user_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_token(), target);
  }

  // string game_token = 2;
  if (this->game_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_token().data(), static_cast<int>(this->game_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchRequest.game_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_token(), target);
  }

  // .netcode.MatchmakingParameter matchmaking_parameters = 3;
  if (this->has_matchmaking_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_matchmaking_parameters(), deterministic, target);
  }

  // uint32 timeout_suggestion_seconds = 4;
  if (this->timeout_suggestion_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout_suggestion_seconds(), target);
  }

  // .nim.GameParameter nim_game_parameters = 10;
  if (has_nim_game_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_nim_game_parameters(), deterministic, target);
  }

  // .dab.GameParameter dab_game_parameters = 11;
  if (has_dab_game_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_dab_game_parameters(), deterministic, target);
  }

  // .dom.GameParameter dom_game_parameters = 12;
  if (has_dom_game_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_dom_game_parameters(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.MatchRequest)
  return target;
}

size_t MatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.MatchRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_token = 1;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());
  }

  // string game_token = 2;
  if (this->game_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_token());
  }

  // .netcode.MatchmakingParameter matchmaking_parameters = 3;
  if (this->has_matchmaking_parameters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *matchmaking_parameters_);
  }

  // uint32 timeout_suggestion_seconds = 4;
  if (this->timeout_suggestion_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeout_suggestion_seconds());
  }

  switch (game_parameters_case()) {
    // .nim.GameParameter nim_game_parameters = 10;
    case kNimGameParameters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_parameters_.nim_game_parameters_);
      break;
    }
    // .dab.GameParameter dab_game_parameters = 11;
    case kDabGameParameters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_parameters_.dab_game_parameters_);
      break;
    }
    // .dom.GameParameter dom_game_parameters = 12;
    case kDomGameParameters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_parameters_.dom_game_parameters_);
      break;
    }
    case GAME_PARAMETERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.MatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.MatchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.MatchRequest)
    MergeFrom(*source);
  }
}

void MatchRequest::MergeFrom(const MatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.MatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token().size() > 0) {

    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  if (from.game_token().size() > 0) {

    game_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_token_);
  }
  if (from.has_matchmaking_parameters()) {
    mutable_matchmaking_parameters()->::netcode::MatchmakingParameter::MergeFrom(from.matchmaking_parameters());
  }
  if (from.timeout_suggestion_seconds() != 0) {
    set_timeout_suggestion_seconds(from.timeout_suggestion_seconds());
  }
  switch (from.game_parameters_case()) {
    case kNimGameParameters: {
      mutable_nim_game_parameters()->::nim::GameParameter::MergeFrom(from.nim_game_parameters());
      break;
    }
    case kDabGameParameters: {
      mutable_dab_game_parameters()->::dab::GameParameter::MergeFrom(from.dab_game_parameters());
      break;
    }
    case kDomGameParameters: {
      mutable_dom_game_parameters()->::dom::GameParameter::MergeFrom(from.dom_game_parameters());
      break;
    }
    case GAME_PARAMETERS_NOT_SET: {
      break;
    }
  }
}

void MatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.MatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRequest::CopyFrom(const MatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.MatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRequest::IsInitialized() const {
  return true;
}

void MatchRequest::Swap(MatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchRequest::InternalSwap(MatchRequest* other) {
  using std::swap;
  user_token_.Swap(&other->user_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_token_.Swap(&other->game_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(matchmaking_parameters_, other->matchmaking_parameters_);
  swap(timeout_suggestion_seconds_, other->timeout_suggestion_seconds_);
  swap(game_parameters_, other->game_parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchRequest::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchResponse::kMatchTokenFieldNumber;
const int MatchResponse::kBeginningPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchResponse::MatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_MatchResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.MatchResponse)
}
MatchResponse::MatchResponse(const MatchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.match_token().size() > 0) {
    match_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_token_);
  }
  beginning_player_ = from.beginning_player_;
  // @@protoc_insertion_point(copy_constructor:netcode.MatchResponse)
}

void MatchResponse::SharedCtor() {
  match_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beginning_player_ = false;
}

MatchResponse::~MatchResponse() {
  // @@protoc_insertion_point(destructor:netcode.MatchResponse)
  SharedDtor();
}

void MatchResponse::SharedDtor() {
  match_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchResponse& MatchResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_MatchResponse.base);
  return *internal_default_instance();
}


void MatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.MatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beginning_player_ = false;
  _internal_metadata_.Clear();
}

bool MatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.MatchResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string match_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->match_token().data(), static_cast<int>(this->match_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.MatchResponse.match_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool beginning_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginning_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.MatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.MatchResponse)
  return false;
#undef DO_
}

void MatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.MatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_token = 1;
  if (this->match_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_token().data(), static_cast<int>(this->match_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchResponse.match_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_token(), output);
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->beginning_player(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.MatchResponse)
}

::google::protobuf::uint8* MatchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.MatchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_token = 1;
  if (this->match_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->match_token().data(), static_cast<int>(this->match_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.MatchResponse.match_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_token(), target);
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->beginning_player(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.MatchResponse)
  return target;
}

size_t MatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.MatchResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string match_token = 1;
  if (this->match_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->match_token());
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.MatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.MatchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.MatchResponse)
    MergeFrom(*source);
  }
}

void MatchResponse::MergeFrom(const MatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.MatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match_token().size() > 0) {

    match_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_token_);
  }
  if (from.beginning_player() != 0) {
    set_beginning_player(from.beginning_player());
  }
}

void MatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.MatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchResponse::CopyFrom(const MatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.MatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResponse::IsInitialized() const {
  return true;
}

void MatchResponse::Swap(MatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchResponse::InternalSwap(MatchResponse* other) {
  using std::swap;
  match_token_.Swap(&other->match_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(beginning_player_, other->beginning_player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TurnRequest::InitAsDefaultInstance() {
  ::netcode::_TurnRequest_default_instance_._instance.get_mutable()->match_id_ = const_cast< ::netcode::MatchIDPacket*>(
      ::netcode::MatchIDPacket::internal_default_instance());
  ::netcode::_TurnRequest_default_instance_.nim_game_turn_ = const_cast< ::nim::GameTurn*>(
      ::nim::GameTurn::internal_default_instance());
  ::netcode::_TurnRequest_default_instance_.dab_game_turn_ = const_cast< ::dab::GameTurn*>(
      ::dab::GameTurn::internal_default_instance());
  ::netcode::_TurnRequest_default_instance_.dom_game_turn_ = const_cast< ::dom::GameTurn*>(
      ::dom::GameTurn::internal_default_instance());
}
void TurnRequest::set_allocated_nim_game_turn(::nim::GameTurn* nim_game_turn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_turn();
  if (nim_game_turn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nim_game_turn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nim_game_turn, submessage_arena);
    }
    set_has_nim_game_turn();
    game_turn_.nim_game_turn_ = nim_game_turn;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnRequest.nim_game_turn)
}
void TurnRequest::clear_nim_game_turn() {
  if (has_nim_game_turn()) {
    delete game_turn_.nim_game_turn_;
    clear_has_game_turn();
  }
}
void TurnRequest::set_allocated_dab_game_turn(::dab::GameTurn* dab_game_turn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_turn();
  if (dab_game_turn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dab_game_turn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dab_game_turn, submessage_arena);
    }
    set_has_dab_game_turn();
    game_turn_.dab_game_turn_ = dab_game_turn;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnRequest.dab_game_turn)
}
void TurnRequest::clear_dab_game_turn() {
  if (has_dab_game_turn()) {
    delete game_turn_.dab_game_turn_;
    clear_has_game_turn();
  }
}
void TurnRequest::set_allocated_dom_game_turn(::dom::GameTurn* dom_game_turn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_turn();
  if (dom_game_turn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dom_game_turn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dom_game_turn, submessage_arena);
    }
    set_has_dom_game_turn();
    game_turn_.dom_game_turn_ = dom_game_turn;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnRequest.dom_game_turn)
}
void TurnRequest::clear_dom_game_turn() {
  if (has_dom_game_turn()) {
    delete game_turn_.dom_game_turn_;
    clear_has_game_turn();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnRequest::kMatchIdFieldNumber;
const int TurnRequest::kNimGameTurnFieldNumber;
const int TurnRequest::kDabGameTurnFieldNumber;
const int TurnRequest::kDomGameTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnRequest::TurnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_TurnRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.TurnRequest)
}
TurnRequest::TurnRequest(const TurnRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match_id()) {
    match_id_ = new ::netcode::MatchIDPacket(*from.match_id_);
  } else {
    match_id_ = NULL;
  }
  clear_has_game_turn();
  switch (from.game_turn_case()) {
    case kNimGameTurn: {
      mutable_nim_game_turn()->::nim::GameTurn::MergeFrom(from.nim_game_turn());
      break;
    }
    case kDabGameTurn: {
      mutable_dab_game_turn()->::dab::GameTurn::MergeFrom(from.dab_game_turn());
      break;
    }
    case kDomGameTurn: {
      mutable_dom_game_turn()->::dom::GameTurn::MergeFrom(from.dom_game_turn());
      break;
    }
    case GAME_TURN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:netcode.TurnRequest)
}

void TurnRequest::SharedCtor() {
  match_id_ = NULL;
  clear_has_game_turn();
}

TurnRequest::~TurnRequest() {
  // @@protoc_insertion_point(destructor:netcode.TurnRequest)
  SharedDtor();
}

void TurnRequest::SharedDtor() {
  if (this != internal_default_instance()) delete match_id_;
  if (has_game_turn()) {
    clear_game_turn();
  }
}

void TurnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TurnRequest::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TurnRequest& TurnRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_TurnRequest.base);
  return *internal_default_instance();
}


void TurnRequest::clear_game_turn() {
// @@protoc_insertion_point(one_of_clear_start:netcode.TurnRequest)
  switch (game_turn_case()) {
    case kNimGameTurn: {
      delete game_turn_.nim_game_turn_;
      break;
    }
    case kDabGameTurn: {
      delete game_turn_.dab_game_turn_;
      break;
    }
    case kDomGameTurn: {
      delete game_turn_.dom_game_turn_;
      break;
    }
    case GAME_TURN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAME_TURN_NOT_SET;
}


void TurnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.TurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && match_id_ != NULL) {
    delete match_id_;
  }
  match_id_ = NULL;
  clear_game_turn();
  _internal_metadata_.Clear();
}

bool TurnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.TurnRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.MatchIDPacket match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nim.GameTurn nim_game_turn = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nim_game_turn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dab.GameTurn dab_game_turn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dab_game_turn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dom.GameTurn dom_game_turn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dom_game_turn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.TurnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.TurnRequest)
  return false;
#undef DO_
}

void TurnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.TurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.MatchIDPacket match_id = 1;
  if (this->has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_match_id(), output);
  }

  // .nim.GameTurn nim_game_turn = 10;
  if (has_nim_game_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_nim_game_turn(), output);
  }

  // .dab.GameTurn dab_game_turn = 11;
  if (has_dab_game_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_dab_game_turn(), output);
  }

  // .dom.GameTurn dom_game_turn = 12;
  if (has_dom_game_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_dom_game_turn(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.TurnRequest)
}

::google::protobuf::uint8* TurnRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.TurnRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.MatchIDPacket match_id = 1;
  if (this->has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_match_id(), deterministic, target);
  }

  // .nim.GameTurn nim_game_turn = 10;
  if (has_nim_game_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_nim_game_turn(), deterministic, target);
  }

  // .dab.GameTurn dab_game_turn = 11;
  if (has_dab_game_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_dab_game_turn(), deterministic, target);
  }

  // .dom.GameTurn dom_game_turn = 12;
  if (has_dom_game_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_dom_game_turn(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.TurnRequest)
  return target;
}

size_t TurnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.TurnRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.MatchIDPacket match_id = 1;
  if (this->has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *match_id_);
  }

  switch (game_turn_case()) {
    // .nim.GameTurn nim_game_turn = 10;
    case kNimGameTurn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_turn_.nim_game_turn_);
      break;
    }
    // .dab.GameTurn dab_game_turn = 11;
    case kDabGameTurn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_turn_.dab_game_turn_);
      break;
    }
    // .dom.GameTurn dom_game_turn = 12;
    case kDomGameTurn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_turn_.dom_game_turn_);
      break;
    }
    case GAME_TURN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.TurnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.TurnRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.TurnRequest)
    MergeFrom(*source);
  }
}

void TurnRequest::MergeFrom(const TurnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.TurnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match_id()) {
    mutable_match_id()->::netcode::MatchIDPacket::MergeFrom(from.match_id());
  }
  switch (from.game_turn_case()) {
    case kNimGameTurn: {
      mutable_nim_game_turn()->::nim::GameTurn::MergeFrom(from.nim_game_turn());
      break;
    }
    case kDabGameTurn: {
      mutable_dab_game_turn()->::dab::GameTurn::MergeFrom(from.dab_game_turn());
      break;
    }
    case kDomGameTurn: {
      mutable_dom_game_turn()->::dom::GameTurn::MergeFrom(from.dom_game_turn());
      break;
    }
    case GAME_TURN_NOT_SET: {
      break;
    }
  }
}

void TurnRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.TurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnRequest::CopyFrom(const TurnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.TurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnRequest::IsInitialized() const {
  return true;
}

void TurnRequest::Swap(TurnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnRequest::InternalSwap(TurnRequest* other) {
  using std::swap;
  swap(match_id_, other->match_id_);
  swap(game_turn_, other->game_turn_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TurnRequest::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TurnResponse::InitAsDefaultInstance() {
  ::netcode::_TurnResponse_default_instance_.nim_game_state_ = const_cast< ::nim::GameState*>(
      ::nim::GameState::internal_default_instance());
  ::netcode::_TurnResponse_default_instance_.dab_game_state_ = const_cast< ::dab::GameState*>(
      ::dab::GameState::internal_default_instance());
  ::netcode::_TurnResponse_default_instance_.dom_game_state_ = const_cast< ::dom::GameState*>(
      ::dom::GameState::internal_default_instance());
}
void TurnResponse::set_allocated_nim_game_state(::nim::GameState* nim_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (nim_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nim_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nim_game_state, submessage_arena);
    }
    set_has_nim_game_state();
    game_state_.nim_game_state_ = nim_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnResponse.nim_game_state)
}
void TurnResponse::clear_nim_game_state() {
  if (has_nim_game_state()) {
    delete game_state_.nim_game_state_;
    clear_has_game_state();
  }
}
void TurnResponse::set_allocated_dab_game_state(::dab::GameState* dab_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (dab_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dab_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dab_game_state, submessage_arena);
    }
    set_has_dab_game_state();
    game_state_.dab_game_state_ = dab_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnResponse.dab_game_state)
}
void TurnResponse::clear_dab_game_state() {
  if (has_dab_game_state()) {
    delete game_state_.dab_game_state_;
    clear_has_game_state();
  }
}
void TurnResponse::set_allocated_dom_game_state(::dom::GameState* dom_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (dom_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dom_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dom_game_state, submessage_arena);
    }
    set_has_dom_game_state();
    game_state_.dom_game_state_ = dom_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.TurnResponse.dom_game_state)
}
void TurnResponse::clear_dom_game_state() {
  if (has_dom_game_state()) {
    delete game_state_.dom_game_state_;
    clear_has_game_state();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TurnResponse::kTurnStatusFieldNumber;
const int TurnResponse::kNimGameStateFieldNumber;
const int TurnResponse::kDabGameStateFieldNumber;
const int TurnResponse::kDomGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TurnResponse::TurnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_TurnResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.TurnResponse)
}
TurnResponse::TurnResponse(const TurnResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_status_ = from.turn_status_;
  clear_has_game_state();
  switch (from.game_state_case()) {
    case kNimGameState: {
      mutable_nim_game_state()->::nim::GameState::MergeFrom(from.nim_game_state());
      break;
    }
    case kDabGameState: {
      mutable_dab_game_state()->::dab::GameState::MergeFrom(from.dab_game_state());
      break;
    }
    case kDomGameState: {
      mutable_dom_game_state()->::dom::GameState::MergeFrom(from.dom_game_state());
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:netcode.TurnResponse)
}

void TurnResponse::SharedCtor() {
  turn_status_ = 0;
  clear_has_game_state();
}

TurnResponse::~TurnResponse() {
  // @@protoc_insertion_point(destructor:netcode.TurnResponse)
  SharedDtor();
}

void TurnResponse::SharedDtor() {
  if (has_game_state()) {
    clear_game_state();
  }
}

void TurnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TurnResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TurnResponse& TurnResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_TurnResponse.base);
  return *internal_default_instance();
}


void TurnResponse::clear_game_state() {
// @@protoc_insertion_point(one_of_clear_start:netcode.TurnResponse)
  switch (game_state_case()) {
    case kNimGameState: {
      delete game_state_.nim_game_state_;
      break;
    }
    case kDabGameState: {
      delete game_state_.dab_game_state_;
      break;
    }
    case kDomGameState: {
      delete game_state_.dom_game_state_;
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAME_STATE_NOT_SET;
}


void TurnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.TurnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_status_ = 0;
  clear_game_state();
  _internal_metadata_.Clear();
}

bool TurnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.TurnResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.TurnStatus turn_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_status(static_cast< ::netcode::TurnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nim.GameState nim_game_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nim_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dab.GameState dab_game_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dab_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dom.GameState dom_game_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dom_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.TurnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.TurnResponse)
  return false;
#undef DO_
}

void TurnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.TurnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.TurnStatus turn_status = 1;
  if (this->turn_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_status(), output);
  }

  // .nim.GameState nim_game_state = 10;
  if (has_nim_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_nim_game_state(), output);
  }

  // .dab.GameState dab_game_state = 11;
  if (has_dab_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_dab_game_state(), output);
  }

  // .dom.GameState dom_game_state = 12;
  if (has_dom_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_dom_game_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.TurnResponse)
}

::google::protobuf::uint8* TurnResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.TurnResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.TurnStatus turn_status = 1;
  if (this->turn_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_status(), target);
  }

  // .nim.GameState nim_game_state = 10;
  if (has_nim_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_nim_game_state(), deterministic, target);
  }

  // .dab.GameState dab_game_state = 11;
  if (has_dab_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_dab_game_state(), deterministic, target);
  }

  // .dom.GameState dom_game_state = 12;
  if (has_dom_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_dom_game_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.TurnResponse)
  return target;
}

size_t TurnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.TurnResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.TurnStatus turn_status = 1;
  if (this->turn_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_status());
  }

  switch (game_state_case()) {
    // .nim.GameState nim_game_state = 10;
    case kNimGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.nim_game_state_);
      break;
    }
    // .dab.GameState dab_game_state = 11;
    case kDabGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.dab_game_state_);
      break;
    }
    // .dom.GameState dom_game_state = 12;
    case kDomGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.dom_game_state_);
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.TurnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TurnResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TurnResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.TurnResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.TurnResponse)
    MergeFrom(*source);
  }
}

void TurnResponse::MergeFrom(const TurnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.TurnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.turn_status() != 0) {
    set_turn_status(from.turn_status());
  }
  switch (from.game_state_case()) {
    case kNimGameState: {
      mutable_nim_game_state()->::nim::GameState::MergeFrom(from.nim_game_state());
      break;
    }
    case kDabGameState: {
      mutable_dab_game_state()->::dab::GameState::MergeFrom(from.dab_game_state());
      break;
    }
    case kDomGameState: {
      mutable_dom_game_state()->::dom::GameState::MergeFrom(from.dom_game_state());
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
}

void TurnResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.TurnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnResponse::CopyFrom(const TurnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.TurnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnResponse::IsInitialized() const {
  return true;
}

void TurnResponse::Swap(TurnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TurnResponse::InternalSwap(TurnResponse* other) {
  using std::swap;
  swap(turn_status_, other->turn_status_);
  swap(game_state_, other->game_state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TurnResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameStateResponse::InitAsDefaultInstance() {
  ::netcode::_GameStateResponse_default_instance_.nim_game_state_ = const_cast< ::nim::GameState*>(
      ::nim::GameState::internal_default_instance());
  ::netcode::_GameStateResponse_default_instance_.dab_game_state_ = const_cast< ::dab::GameState*>(
      ::dab::GameState::internal_default_instance());
  ::netcode::_GameStateResponse_default_instance_.dom_game_state_ = const_cast< ::dom::GameState*>(
      ::dom::GameState::internal_default_instance());
}
void GameStateResponse::set_allocated_nim_game_state(::nim::GameState* nim_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (nim_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nim_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nim_game_state, submessage_arena);
    }
    set_has_nim_game_state();
    game_state_.nim_game_state_ = nim_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.GameStateResponse.nim_game_state)
}
void GameStateResponse::clear_nim_game_state() {
  if (has_nim_game_state()) {
    delete game_state_.nim_game_state_;
    clear_has_game_state();
  }
}
void GameStateResponse::set_allocated_dab_game_state(::dab::GameState* dab_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (dab_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dab_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dab_game_state, submessage_arena);
    }
    set_has_dab_game_state();
    game_state_.dab_game_state_ = dab_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.GameStateResponse.dab_game_state)
}
void GameStateResponse::clear_dab_game_state() {
  if (has_dab_game_state()) {
    delete game_state_.dab_game_state_;
    clear_has_game_state();
  }
}
void GameStateResponse::set_allocated_dom_game_state(::dom::GameState* dom_game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_game_state();
  if (dom_game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dom_game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dom_game_state, submessage_arena);
    }
    set_has_dom_game_state();
    game_state_.dom_game_state_ = dom_game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:netcode.GameStateResponse.dom_game_state)
}
void GameStateResponse::clear_dom_game_state() {
  if (has_dom_game_state()) {
    delete game_state_.dom_game_state_;
    clear_has_game_state();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStateResponse::kGameStatusFieldNumber;
const int GameStateResponse::kBeginningPlayerFieldNumber;
const int GameStateResponse::kNimGameStateFieldNumber;
const int GameStateResponse::kDabGameStateFieldNumber;
const int GameStateResponse::kDomGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStateResponse::GameStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_GameStateResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.GameStateResponse)
}
GameStateResponse::GameStateResponse(const GameStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_status_, &from.game_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&beginning_player_) -
    reinterpret_cast<char*>(&game_status_)) + sizeof(beginning_player_));
  clear_has_game_state();
  switch (from.game_state_case()) {
    case kNimGameState: {
      mutable_nim_game_state()->::nim::GameState::MergeFrom(from.nim_game_state());
      break;
    }
    case kDabGameState: {
      mutable_dab_game_state()->::dab::GameState::MergeFrom(from.dab_game_state());
      break;
    }
    case kDomGameState: {
      mutable_dom_game_state()->::dom::GameState::MergeFrom(from.dom_game_state());
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:netcode.GameStateResponse)
}

void GameStateResponse::SharedCtor() {
  ::memset(&game_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beginning_player_) -
      reinterpret_cast<char*>(&game_status_)) + sizeof(beginning_player_));
  clear_has_game_state();
}

GameStateResponse::~GameStateResponse() {
  // @@protoc_insertion_point(destructor:netcode.GameStateResponse)
  SharedDtor();
}

void GameStateResponse::SharedDtor() {
  if (has_game_state()) {
    clear_game_state();
  }
}

void GameStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameStateResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameStateResponse& GameStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_GameStateResponse.base);
  return *internal_default_instance();
}


void GameStateResponse::clear_game_state() {
// @@protoc_insertion_point(one_of_clear_start:netcode.GameStateResponse)
  switch (game_state_case()) {
    case kNimGameState: {
      delete game_state_.nim_game_state_;
      break;
    }
    case kDabGameState: {
      delete game_state_.dab_game_state_;
      break;
    }
    case kDomGameState: {
      delete game_state_.dom_game_state_;
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GAME_STATE_NOT_SET;
}


void GameStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.GameStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beginning_player_) -
      reinterpret_cast<char*>(&game_status_)) + sizeof(beginning_player_));
  clear_game_state();
  _internal_metadata_.Clear();
}

bool GameStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.GameStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netcode.GameStatus game_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_game_status(static_cast< ::netcode::GameStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool beginning_player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &beginning_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nim.GameState nim_game_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nim_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dab.GameState dab_game_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dab_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dom.GameState dom_game_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dom_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.GameStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.GameStateResponse)
  return false;
#undef DO_
}

void GameStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.GameStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.GameStatus game_status = 1;
  if (this->game_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->game_status(), output);
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->beginning_player(), output);
  }

  // .nim.GameState nim_game_state = 10;
  if (has_nim_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_nim_game_state(), output);
  }

  // .dab.GameState dab_game_state = 11;
  if (has_dab_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_dab_game_state(), output);
  }

  // .dom.GameState dom_game_state = 12;
  if (has_dom_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_dom_game_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.GameStateResponse)
}

::google::protobuf::uint8* GameStateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.GameStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netcode.GameStatus game_status = 1;
  if (this->game_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->game_status(), target);
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->beginning_player(), target);
  }

  // .nim.GameState nim_game_state = 10;
  if (has_nim_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_nim_game_state(), deterministic, target);
  }

  // .dab.GameState dab_game_state = 11;
  if (has_dab_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_dab_game_state(), deterministic, target);
  }

  // .dom.GameState dom_game_state = 12;
  if (has_dom_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_dom_game_state(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.GameStateResponse)
  return target;
}

size_t GameStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.GameStateResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .netcode.GameStatus game_status = 1;
  if (this->game_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_status());
  }

  // bool beginning_player = 2;
  if (this->beginning_player() != 0) {
    total_size += 1 + 1;
  }

  switch (game_state_case()) {
    // .nim.GameState nim_game_state = 10;
    case kNimGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.nim_game_state_);
      break;
    }
    // .dab.GameState dab_game_state = 11;
    case kDabGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.dab_game_state_);
      break;
    }
    // .dom.GameState dom_game_state = 12;
    case kDomGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_.dom_game_state_);
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.GameStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.GameStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.GameStateResponse)
    MergeFrom(*source);
  }
}

void GameStateResponse::MergeFrom(const GameStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.GameStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_status() != 0) {
    set_game_status(from.game_status());
  }
  if (from.beginning_player() != 0) {
    set_beginning_player(from.beginning_player());
  }
  switch (from.game_state_case()) {
    case kNimGameState: {
      mutable_nim_game_state()->::nim::GameState::MergeFrom(from.nim_game_state());
      break;
    }
    case kDabGameState: {
      mutable_dab_game_state()->::dab::GameState::MergeFrom(from.dab_game_state());
      break;
    }
    case kDomGameState: {
      mutable_dom_game_state()->::dom::GameState::MergeFrom(from.dom_game_state());
      break;
    }
    case GAME_STATE_NOT_SET: {
      break;
    }
  }
}

void GameStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.GameStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateResponse::CopyFrom(const GameStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.GameStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateResponse::IsInitialized() const {
  return true;
}

void GameStateResponse::Swap(GameStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStateResponse::InternalSwap(GameStateResponse* other) {
  using std::swap;
  swap(game_status_, other->game_status_);
  swap(beginning_player_, other->beginning_player_);
  swap(game_state_, other->game_state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameStateResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpponentInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpponentInfoResponse::kUserPseudonymFieldNumber;
const int OpponentInfoResponse::kGroupPseudonymFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpponentInfoResponse::OpponentInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_OpponentInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.OpponentInfoResponse)
}
OpponentInfoResponse::OpponentInfoResponse(const OpponentInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_pseudonym().size() > 0) {
    user_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pseudonym_);
  }
  group_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_pseudonym().size() > 0) {
    group_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_pseudonym_);
  }
  // @@protoc_insertion_point(copy_constructor:netcode.OpponentInfoResponse)
}

void OpponentInfoResponse::SharedCtor() {
  user_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_pseudonym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OpponentInfoResponse::~OpponentInfoResponse() {
  // @@protoc_insertion_point(destructor:netcode.OpponentInfoResponse)
  SharedDtor();
}

void OpponentInfoResponse::SharedDtor() {
  user_pseudonym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_pseudonym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpponentInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpponentInfoResponse::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpponentInfoResponse& OpponentInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_OpponentInfoResponse.base);
  return *internal_default_instance();
}


void OpponentInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.OpponentInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_pseudonym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_pseudonym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OpponentInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.OpponentInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_pseudonym = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_pseudonym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.OpponentInfoResponse.user_pseudonym"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_pseudonym = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_pseudonym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_pseudonym().data(), static_cast<int>(this->group_pseudonym().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netcode.OpponentInfoResponse.group_pseudonym"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.OpponentInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.OpponentInfoResponse)
  return false;
#undef DO_
}

void OpponentInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.OpponentInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.OpponentInfoResponse.user_pseudonym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_pseudonym(), output);
  }

  // string group_pseudonym = 2;
  if (this->group_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_pseudonym().data(), static_cast<int>(this->group_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.OpponentInfoResponse.group_pseudonym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_pseudonym(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.OpponentInfoResponse)
}

::google::protobuf::uint8* OpponentInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.OpponentInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_pseudonym().data(), static_cast<int>(this->user_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.OpponentInfoResponse.user_pseudonym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_pseudonym(), target);
  }

  // string group_pseudonym = 2;
  if (this->group_pseudonym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_pseudonym().data(), static_cast<int>(this->group_pseudonym().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netcode.OpponentInfoResponse.group_pseudonym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_pseudonym(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.OpponentInfoResponse)
  return target;
}

size_t OpponentInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.OpponentInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_pseudonym = 1;
  if (this->user_pseudonym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_pseudonym());
  }

  // string group_pseudonym = 2;
  if (this->group_pseudonym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_pseudonym());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpponentInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.OpponentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OpponentInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpponentInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.OpponentInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.OpponentInfoResponse)
    MergeFrom(*source);
  }
}

void OpponentInfoResponse::MergeFrom(const OpponentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.OpponentInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_pseudonym().size() > 0) {

    user_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pseudonym_);
  }
  if (from.group_pseudonym().size() > 0) {

    group_pseudonym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_pseudonym_);
  }
}

void OpponentInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.OpponentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpponentInfoResponse::CopyFrom(const OpponentInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.OpponentInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpponentInfoResponse::IsInitialized() const {
  return true;
}

void OpponentInfoResponse::Swap(OpponentInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpponentInfoResponse::InternalSwap(OpponentInfoResponse* other) {
  using std::swap;
  user_pseudonym_.Swap(&other->user_pseudonym_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_pseudonym_.Swap(&other->group_pseudonym_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpponentInfoResponse::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Nothing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nothing::Nothing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_netcode_2eproto::scc_info_Nothing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netcode.Nothing)
}
Nothing::Nothing(const Nothing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:netcode.Nothing)
}

void Nothing::SharedCtor() {
}

Nothing::~Nothing() {
  // @@protoc_insertion_point(destructor:netcode.Nothing)
  SharedDtor();
}

void Nothing::SharedDtor() {
}

void Nothing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Nothing::descriptor() {
  ::protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nothing& Nothing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_netcode_2eproto::scc_info_Nothing.base);
  return *internal_default_instance();
}


void Nothing::Clear() {
// @@protoc_insertion_point(message_clear_start:netcode.Nothing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Nothing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netcode.Nothing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:netcode.Nothing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netcode.Nothing)
  return false;
#undef DO_
}

void Nothing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netcode.Nothing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netcode.Nothing)
}

::google::protobuf::uint8* Nothing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netcode.Nothing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netcode.Nothing)
  return target;
}

size_t Nothing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netcode.Nothing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nothing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netcode.Nothing)
  GOOGLE_DCHECK_NE(&from, this);
  const Nothing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nothing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netcode.Nothing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netcode.Nothing)
    MergeFrom(*source);
  }
}

void Nothing::MergeFrom(const Nothing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netcode.Nothing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Nothing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netcode.Nothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nothing::CopyFrom(const Nothing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netcode.Nothing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nothing::IsInitialized() const {
  return true;
}

void Nothing::Swap(Nothing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nothing::InternalSwap(Nothing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Nothing::GetMetadata() const {
  protobuf_netcode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netcode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netcode
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::AuthPacket* Arena::CreateMaybeMessage< ::netcode::AuthPacket >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::AuthPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::MatchIDPacket* Arena::CreateMaybeMessage< ::netcode::MatchIDPacket >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::MatchIDPacket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::GetTimeoutResponse* Arena::CreateMaybeMessage< ::netcode::GetTimeoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::GetTimeoutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::SetPseudonymRequest* Arena::CreateMaybeMessage< ::netcode::SetPseudonymRequest >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::SetPseudonymRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::SetPseudonymResponse* Arena::CreateMaybeMessage< ::netcode::SetPseudonymResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::SetPseudonymResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::GetUserTokenResponse* Arena::CreateMaybeMessage< ::netcode::GetUserTokenResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::GetUserTokenResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::UserRegistrationRequest* Arena::CreateMaybeMessage< ::netcode::UserRegistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::UserRegistrationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::UserRegistrationResponse* Arena::CreateMaybeMessage< ::netcode::UserRegistrationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::UserRegistrationResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::GroupRegistrationRequest* Arena::CreateMaybeMessage< ::netcode::GroupRegistrationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::GroupRegistrationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::GroupRegistrationResponse* Arena::CreateMaybeMessage< ::netcode::GroupRegistrationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::GroupRegistrationResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::DirectChallenge* Arena::CreateMaybeMessage< ::netcode::DirectChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::DirectChallenge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::MatchmakingParameter* Arena::CreateMaybeMessage< ::netcode::MatchmakingParameter >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::MatchmakingParameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::MatchRequest* Arena::CreateMaybeMessage< ::netcode::MatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::MatchRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::MatchResponse* Arena::CreateMaybeMessage< ::netcode::MatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::MatchResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::TurnRequest* Arena::CreateMaybeMessage< ::netcode::TurnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::TurnRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::TurnResponse* Arena::CreateMaybeMessage< ::netcode::TurnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::TurnResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::GameStateResponse* Arena::CreateMaybeMessage< ::netcode::GameStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::GameStateResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::OpponentInfoResponse* Arena::CreateMaybeMessage< ::netcode::OpponentInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::OpponentInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netcode::Nothing* Arena::CreateMaybeMessage< ::netcode::Nothing >(Arena* arena) {
  return Arena::CreateInternal< ::netcode::Nothing >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
