// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: netcode.proto
// Original file comments:
// Version: 1.2
// Author: Martin Wistauder
// Date: 21.09.2020
//
// Server Address: 	gameserver.ist.tugraz.at
// Port: 			80
#ifndef GRPC_netcode_2eproto__INCLUDED
#define GRPC_netcode_2eproto__INCLUDED

#include "netcode.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace netcode {

class GameCom final {
 public:
  static constexpr char const* service_full_name() {
    return "netcode.GameCom";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Game-related
    virtual ::grpc::Status NewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::netcode::MatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>> AsyncNewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>>(AsyncNewMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>> PrepareAsyncNewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>>(PrepareAsyncNewMatchRaw(context, request, cq));
    }
    virtual ::grpc::Status SubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::netcode::TurnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>> AsyncSubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>>(AsyncSubmitTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>> PrepareAsyncSubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>>(PrepareAsyncSubmitTurnRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::GameStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>> AsyncGetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>>(AsyncGetGameStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>> PrepareAsyncGetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>>(PrepareAsyncGetGameStateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::GetTimeoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>> AsyncGetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>>(AsyncGetTimeoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>> PrepareAsyncGetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>>(PrepareAsyncGetTimeoutRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::OpponentInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>> AsyncGetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>>(AsyncGetOpponentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>> PrepareAsyncGetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>>(PrepareAsyncGetOpponentInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status AbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::Nothing* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>> AsyncAbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>>(AsyncAbortMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>> PrepareAsyncAbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>>(PrepareAsyncAbortMatchRaw(context, request, cq));
    }
    // Disabled
    // Organisation-related
    virtual ::grpc::Status UserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::netcode::UserRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>> AsyncUserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>>(AsyncUserRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>> PrepareAsyncUserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>>(PrepareAsyncUserRegistrationRaw(context, request, cq));
    }
    virtual ::grpc::Status GroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::netcode::GroupRegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>> AsyncGroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>>(AsyncGroupRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>> PrepareAsyncGroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>>(PrepareAsyncGroupRegistrationRaw(context, request, cq));
    }
    virtual ::grpc::Status SetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::netcode::SetPseudonymResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>> AsyncSetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>>(AsyncSetGroupPseudonymRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>> PrepareAsyncSetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>>(PrepareAsyncSetGroupPseudonymRaw(context, request, cq));
    }
    virtual ::grpc::Status SetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::netcode::SetPseudonymResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>> AsyncSetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>>(AsyncSetUserPseudonymRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>> PrepareAsyncSetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>>(PrepareAsyncSetUserPseudonymRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::netcode::GetUserTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>> AsyncGetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>>(AsyncGetUserTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>> PrepareAsyncGetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>>(PrepareAsyncGetUserTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Game-related
      virtual void NewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response, std::function<void(::grpc::Status)>) = 0;
      // Disabled
      // Organisation-related
      virtual void UserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>* AsyncNewMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::MatchResponse>* PrepareAsyncNewMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>* AsyncSubmitTurnRaw(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::TurnResponse>* PrepareAsyncSubmitTurnRaw(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>* AsyncGetGameStateRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GameStateResponse>* PrepareAsyncGetGameStateRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>* AsyncGetTimeoutRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetTimeoutResponse>* PrepareAsyncGetTimeoutRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>* AsyncGetOpponentInfoRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::OpponentInfoResponse>* PrepareAsyncGetOpponentInfoRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>* AsyncAbortMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::Nothing>* PrepareAsyncAbortMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>* AsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::UserRegistrationResponse>* PrepareAsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>* AsyncGroupRegistrationRaw(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GroupRegistrationResponse>* PrepareAsyncGroupRegistrationRaw(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>* AsyncSetGroupPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>* PrepareAsyncSetGroupPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>* AsyncSetUserPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::SetPseudonymResponse>* PrepareAsyncSetUserPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>* AsyncGetUserTokenRaw(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::netcode::GetUserTokenResponse>* PrepareAsyncGetUserTokenRaw(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::netcode::MatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>> AsyncNewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>>(AsyncNewMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>> PrepareAsyncNewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>>(PrepareAsyncNewMatchRaw(context, request, cq));
    }
    ::grpc::Status SubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::netcode::TurnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>> AsyncSubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>>(AsyncSubmitTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>> PrepareAsyncSubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>>(PrepareAsyncSubmitTurnRaw(context, request, cq));
    }
    ::grpc::Status GetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::GameStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>> AsyncGetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>>(AsyncGetGameStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>> PrepareAsyncGetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>>(PrepareAsyncGetGameStateRaw(context, request, cq));
    }
    ::grpc::Status GetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::GetTimeoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>> AsyncGetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>>(AsyncGetTimeoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>> PrepareAsyncGetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>>(PrepareAsyncGetTimeoutRaw(context, request, cq));
    }
    ::grpc::Status GetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::OpponentInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>> AsyncGetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>>(AsyncGetOpponentInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>> PrepareAsyncGetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>>(PrepareAsyncGetOpponentInfoRaw(context, request, cq));
    }
    ::grpc::Status AbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::netcode::Nothing* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>> AsyncAbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>>(AsyncAbortMatchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>> PrepareAsyncAbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>>(PrepareAsyncAbortMatchRaw(context, request, cq));
    }
    ::grpc::Status UserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::netcode::UserRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>> AsyncUserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>>(AsyncUserRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>> PrepareAsyncUserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>>(PrepareAsyncUserRegistrationRaw(context, request, cq));
    }
    ::grpc::Status GroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::netcode::GroupRegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>> AsyncGroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>>(AsyncGroupRegistrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>> PrepareAsyncGroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>>(PrepareAsyncGroupRegistrationRaw(context, request, cq));
    }
    ::grpc::Status SetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::netcode::SetPseudonymResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>> AsyncSetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>>(AsyncSetGroupPseudonymRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>> PrepareAsyncSetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>>(PrepareAsyncSetGroupPseudonymRaw(context, request, cq));
    }
    ::grpc::Status SetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::netcode::SetPseudonymResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>> AsyncSetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>>(AsyncSetUserPseudonymRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>> PrepareAsyncSetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>>(PrepareAsyncSetUserPseudonymRaw(context, request, cq));
    }
    ::grpc::Status GetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::netcode::GetUserTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>> AsyncGetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>>(AsyncGetUserTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>> PrepareAsyncGetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>>(PrepareAsyncGetUserTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NewMatch(::grpc::ClientContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitTurn(::grpc::ClientContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGameState(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTimeout(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOpponentInfo(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void AbortMatch(::grpc::ClientContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response, std::function<void(::grpc::Status)>) override;
      void UserRegistration(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void GroupRegistration(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetGroupPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response, std::function<void(::grpc::Status)>) override;
      void SetUserPseudonym(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserToken(::grpc::ClientContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>* AsyncNewMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::MatchResponse>* PrepareAsyncNewMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>* AsyncSubmitTurnRaw(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::TurnResponse>* PrepareAsyncSubmitTurnRaw(::grpc::ClientContext* context, const ::netcode::TurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>* AsyncGetGameStateRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GameStateResponse>* PrepareAsyncGetGameStateRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>* AsyncGetTimeoutRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GetTimeoutResponse>* PrepareAsyncGetTimeoutRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>* AsyncGetOpponentInfoRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::OpponentInfoResponse>* PrepareAsyncGetOpponentInfoRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>* AsyncAbortMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::Nothing>* PrepareAsyncAbortMatchRaw(::grpc::ClientContext* context, const ::netcode::MatchIDPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>* AsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::UserRegistrationResponse>* PrepareAsyncUserRegistrationRaw(::grpc::ClientContext* context, const ::netcode::UserRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>* AsyncGroupRegistrationRaw(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GroupRegistrationResponse>* PrepareAsyncGroupRegistrationRaw(::grpc::ClientContext* context, const ::netcode::GroupRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>* AsyncSetGroupPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>* PrepareAsyncSetGroupPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>* AsyncSetUserPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::SetPseudonymResponse>* PrepareAsyncSetUserPseudonymRaw(::grpc::ClientContext* context, const ::netcode::SetPseudonymRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>* AsyncGetUserTokenRaw(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::netcode::GetUserTokenResponse>* PrepareAsyncGetUserTokenRaw(::grpc::ClientContext* context, const ::netcode::AuthPacket& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewMatch_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitTurn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGameState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimeout_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOpponentInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_AbortMatch_;
    const ::grpc::internal::RpcMethod rpcmethod_UserRegistration_;
    const ::grpc::internal::RpcMethod rpcmethod_GroupRegistration_;
    const ::grpc::internal::RpcMethod rpcmethod_SetGroupPseudonym_;
    const ::grpc::internal::RpcMethod rpcmethod_SetUserPseudonym_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Game-related
    virtual ::grpc::Status NewMatch(::grpc::ServerContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response);
    virtual ::grpc::Status SubmitTurn(::grpc::ServerContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response);
    virtual ::grpc::Status GetGameState(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response);
    virtual ::grpc::Status GetTimeout(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response);
    virtual ::grpc::Status GetOpponentInfo(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response);
    virtual ::grpc::Status AbortMatch(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response);
    // Disabled
    // Organisation-related
    virtual ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response);
    virtual ::grpc::Status GroupRegistration(::grpc::ServerContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response);
    virtual ::grpc::Status SetGroupPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response);
    virtual ::grpc::Status SetUserPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response);
    virtual ::grpc::Status GetUserToken(::grpc::ServerContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewMatch() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMatch(::grpc::ServerContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewMatch(::grpc::ServerContext* context, ::netcode::MatchRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::MatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubmitTurn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubmitTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTurn(::grpc::ServerContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTurn(::grpc::ServerContext* context, ::netcode::TurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::TurnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGameState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameState(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGameState(::grpc::ServerContext* context, ::netcode::MatchIDPacket* request, ::grpc::ServerAsyncResponseWriter< ::netcode::GameStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimeout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTimeout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTimeout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeout(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeout(::grpc::ServerContext* context, ::netcode::MatchIDPacket* request, ::grpc::ServerAsyncResponseWriter< ::netcode::GetTimeoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOpponentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOpponentInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetOpponentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOpponentInfo(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOpponentInfo(::grpc::ServerContext* context, ::netcode::MatchIDPacket* request, ::grpc::ServerAsyncResponseWriter< ::netcode::OpponentInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbortMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AbortMatch() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AbortMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortMatch(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortMatch(::grpc::ServerContext* context, ::netcode::MatchIDPacket* request, ::grpc::ServerAsyncResponseWriter< ::netcode::Nothing>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UserRegistration() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegistration(::grpc::ServerContext* context, ::netcode::UserRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::UserRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GroupRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GroupRegistration() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GroupRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GroupRegistration(::grpc::ServerContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGroupRegistration(::grpc::ServerContext* context, ::netcode::GroupRegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::GroupRegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGroupPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetGroupPseudonym() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetGroupPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGroupPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGroupPseudonym(::grpc::ServerContext* context, ::netcode::SetPseudonymRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::SetPseudonymResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUserPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetUserPseudonym() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetUserPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserPseudonym(::grpc::ServerContext* context, ::netcode::SetPseudonymRequest* request, ::grpc::ServerAsyncResponseWriter< ::netcode::SetPseudonymResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserToken() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetUserToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserToken(::grpc::ServerContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserToken(::grpc::ServerContext* context, ::netcode::AuthPacket* request, ::grpc::ServerAsyncResponseWriter< ::netcode::GetUserTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewMatch<WithAsyncMethod_SubmitTurn<WithAsyncMethod_GetGameState<WithAsyncMethod_GetTimeout<WithAsyncMethod_GetOpponentInfo<WithAsyncMethod_AbortMatch<WithAsyncMethod_UserRegistration<WithAsyncMethod_GroupRegistration<WithAsyncMethod_SetGroupPseudonym<WithAsyncMethod_SetUserPseudonym<WithAsyncMethod_GetUserToken<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_NewMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewMatch() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMatch(::grpc::ServerContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubmitTurn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubmitTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTurn(::grpc::ServerContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGameState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameState(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTimeout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTimeout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTimeout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeout(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOpponentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOpponentInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetOpponentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOpponentInfo(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbortMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AbortMatch() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AbortMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortMatch(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UserRegistration() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GroupRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GroupRegistration() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GroupRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GroupRegistration(::grpc::ServerContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGroupPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetGroupPseudonym() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetGroupPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGroupPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUserPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetUserPseudonym() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetUserPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserToken() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetUserToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserToken(::grpc::ServerContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewMatch() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewMatch(::grpc::ServerContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewMatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubmitTurn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubmitTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitTurn(::grpc::ServerContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitTurn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGameState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGameState(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGameState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTimeout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTimeout() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTimeout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeout(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOpponentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOpponentInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetOpponentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOpponentInfo(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOpponentInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbortMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AbortMatch() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AbortMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortMatch(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortMatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UserRegistration() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GroupRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GroupRegistration() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GroupRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GroupRegistration(::grpc::ServerContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGroupRegistration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGroupPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetGroupPseudonym() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetGroupPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGroupPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGroupPseudonym(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetUserPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetUserPseudonym() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetUserPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUserPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUserPseudonym(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetUserToken() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetUserToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserToken(::grpc::ServerContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewMatch() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::MatchRequest, ::netcode::MatchResponse>(std::bind(&WithStreamedUnaryMethod_NewMatch<BaseClass>::StreamedNewMatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewMatch(::grpc::ServerContext* context, const ::netcode::MatchRequest* request, ::netcode::MatchResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewMatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::MatchRequest,::netcode::MatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SubmitTurn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::TurnRequest, ::netcode::TurnResponse>(std::bind(&WithStreamedUnaryMethod_SubmitTurn<BaseClass>::StreamedSubmitTurn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubmitTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitTurn(::grpc::ServerContext* context, const ::netcode::TurnRequest* request, ::netcode::TurnResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitTurn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::TurnRequest,::netcode::TurnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGameState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGameState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::MatchIDPacket, ::netcode::GameStateResponse>(std::bind(&WithStreamedUnaryMethod_GetGameState<BaseClass>::StreamedGetGameState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGameState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGameState(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GameStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGameState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::MatchIDPacket,::netcode::GameStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTimeout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetTimeout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::MatchIDPacket, ::netcode::GetTimeoutResponse>(std::bind(&WithStreamedUnaryMethod_GetTimeout<BaseClass>::StreamedGetTimeout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTimeout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimeout(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::GetTimeoutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTimeout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::MatchIDPacket,::netcode::GetTimeoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOpponentInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOpponentInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::MatchIDPacket, ::netcode::OpponentInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetOpponentInfo<BaseClass>::StreamedGetOpponentInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOpponentInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOpponentInfo(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::OpponentInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOpponentInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::MatchIDPacket,::netcode::OpponentInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbortMatch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AbortMatch() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::MatchIDPacket, ::netcode::Nothing>(std::bind(&WithStreamedUnaryMethod_AbortMatch<BaseClass>::StreamedAbortMatch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AbortMatch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbortMatch(::grpc::ServerContext* context, const ::netcode::MatchIDPacket* request, ::netcode::Nothing* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbortMatch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::MatchIDPacket,::netcode::Nothing>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UserRegistration() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::UserRegistrationRequest, ::netcode::UserRegistrationResponse>(std::bind(&WithStreamedUnaryMethod_UserRegistration<BaseClass>::StreamedUserRegistration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UserRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserRegistration(::grpc::ServerContext* context, const ::netcode::UserRegistrationRequest* request, ::netcode::UserRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::UserRegistrationRequest,::netcode::UserRegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GroupRegistration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GroupRegistration() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::GroupRegistrationRequest, ::netcode::GroupRegistrationResponse>(std::bind(&WithStreamedUnaryMethod_GroupRegistration<BaseClass>::StreamedGroupRegistration, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GroupRegistration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GroupRegistration(::grpc::ServerContext* context, const ::netcode::GroupRegistrationRequest* request, ::netcode::GroupRegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGroupRegistration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::GroupRegistrationRequest,::netcode::GroupRegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGroupPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetGroupPseudonym() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::SetPseudonymRequest, ::netcode::SetPseudonymResponse>(std::bind(&WithStreamedUnaryMethod_SetGroupPseudonym<BaseClass>::StreamedSetGroupPseudonym, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetGroupPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGroupPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGroupPseudonym(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::SetPseudonymRequest,::netcode::SetPseudonymResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetUserPseudonym : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetUserPseudonym() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::SetPseudonymRequest, ::netcode::SetPseudonymResponse>(std::bind(&WithStreamedUnaryMethod_SetUserPseudonym<BaseClass>::StreamedSetUserPseudonym, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetUserPseudonym() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetUserPseudonym(::grpc::ServerContext* context, const ::netcode::SetPseudonymRequest* request, ::netcode::SetPseudonymResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetUserPseudonym(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::SetPseudonymRequest,::netcode::SetPseudonymResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetUserToken() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::netcode::AuthPacket, ::netcode::GetUserTokenResponse>(std::bind(&WithStreamedUnaryMethod_GetUserToken<BaseClass>::StreamedGetUserToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUserToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserToken(::grpc::ServerContext* context, const ::netcode::AuthPacket* request, ::netcode::GetUserTokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::netcode::AuthPacket,::netcode::GetUserTokenResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewMatch<WithStreamedUnaryMethod_SubmitTurn<WithStreamedUnaryMethod_GetGameState<WithStreamedUnaryMethod_GetTimeout<WithStreamedUnaryMethod_GetOpponentInfo<WithStreamedUnaryMethod_AbortMatch<WithStreamedUnaryMethod_UserRegistration<WithStreamedUnaryMethod_GroupRegistration<WithStreamedUnaryMethod_SetGroupPseudonym<WithStreamedUnaryMethod_SetUserPseudonym<WithStreamedUnaryMethod_GetUserToken<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewMatch<WithStreamedUnaryMethod_SubmitTurn<WithStreamedUnaryMethod_GetGameState<WithStreamedUnaryMethod_GetTimeout<WithStreamedUnaryMethod_GetOpponentInfo<WithStreamedUnaryMethod_AbortMatch<WithStreamedUnaryMethod_UserRegistration<WithStreamedUnaryMethod_GroupRegistration<WithStreamedUnaryMethod_SetGroupPseudonym<WithStreamedUnaryMethod_SetUserPseudonym<WithStreamedUnaryMethod_GetUserToken<Service > > > > > > > > > > > StreamedService;
};

}  // namespace netcode


#endif  // GRPC_netcode_2eproto__INCLUDED
