// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dots-and-boxes.proto

#include "dots-and-boxes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace dab {
class GameParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameParameter>
      _instance;
} _GameParameter_default_instance_;
class GameTurnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameTurn>
      _instance;
} _GameTurn_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
}  // namespace dab
namespace protobuf_dots_2dand_2dboxes_2eproto {
static void InitDefaultsGameParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dab::_GameParameter_default_instance_;
    new (ptr) ::dab::GameParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dab::GameParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameParameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameParameter}, {}};

static void InitDefaultsGameTurn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dab::_GameTurn_default_instance_;
    new (ptr) ::dab::GameTurn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dab::GameTurn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameTurn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameTurn}, {}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dab::_GameState_default_instance_;
    new (ptr) ::dab::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dab::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameState}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameParameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameTurn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameParameter, number_of_vertical_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameParameter, number_of_horizontal_columns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameTurn, vertical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameTurn, target_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameTurn, target_gap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameState, vertical_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameState, horizontal_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameState, vertical_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dab::GameState, horizontal_lines_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dab::GameParameter)},
  { 7, -1, sizeof(::dab::GameTurn)},
  { 15, -1, sizeof(::dab::GameState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dab::_GameParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dab::_GameTurn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dab::_GameState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dots-and-boxes.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024dots-and-boxes.proto\022\003dab\"Y\n\rGameParam"
      "eter\022\"\n\032number_of_vertical_columns\030\001 \001(\r"
      "\022$\n\034number_of_horizontal_columns\030\002 \001(\r\"G"
      "\n\010GameTurn\022\020\n\010vertical\030\001 \001(\010\022\025\n\rtarget_c"
      "olumn\030\002 \001(\r\022\022\n\ntarget_gap\030\003 \001(\r\"s\n\tGameS"
      "tate\022\030\n\020vertical_columns\030\001 \001(\r\022\032\n\022horizo"
      "ntal_columns\030\002 \001(\r\022\026\n\016vertical_lines\030\003 \001"
      "(\014\022\030\n\020horizontal_lines\030\004 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dots-and-boxes.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dots_2dand_2dboxes_2eproto
namespace dab {

// ===================================================================

void GameParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameParameter::kNumberOfVerticalColumnsFieldNumber;
const int GameParameter::kNumberOfHorizontalColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameParameter::GameParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameParameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dab.GameParameter)
}
GameParameter::GameParameter(const GameParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_of_vertical_columns_, &from.number_of_vertical_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_horizontal_columns_) -
    reinterpret_cast<char*>(&number_of_vertical_columns_)) + sizeof(number_of_horizontal_columns_));
  // @@protoc_insertion_point(copy_constructor:dab.GameParameter)
}

void GameParameter::SharedCtor() {
  ::memset(&number_of_vertical_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_horizontal_columns_) -
      reinterpret_cast<char*>(&number_of_vertical_columns_)) + sizeof(number_of_horizontal_columns_));
}

GameParameter::~GameParameter() {
  // @@protoc_insertion_point(destructor:dab.GameParameter)
  SharedDtor();
}

void GameParameter::SharedDtor() {
}

void GameParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameParameter::descriptor() {
  ::protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameParameter& GameParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameParameter.base);
  return *internal_default_instance();
}


void GameParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:dab.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_of_vertical_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_horizontal_columns_) -
      reinterpret_cast<char*>(&number_of_vertical_columns_)) + sizeof(number_of_horizontal_columns_));
  _internal_metadata_.Clear();
}

bool GameParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dab.GameParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number_of_vertical_columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_vertical_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_horizontal_columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_horizontal_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dab.GameParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dab.GameParameter)
  return false;
#undef DO_
}

void GameParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dab.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_vertical_columns = 1;
  if (this->number_of_vertical_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_vertical_columns(), output);
  }

  // uint32 number_of_horizontal_columns = 2;
  if (this->number_of_horizontal_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number_of_horizontal_columns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dab.GameParameter)
}

::google::protobuf::uint8* GameParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dab.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_vertical_columns = 1;
  if (this->number_of_vertical_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_vertical_columns(), target);
  }

  // uint32 number_of_horizontal_columns = 2;
  if (this->number_of_horizontal_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_of_horizontal_columns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dab.GameParameter)
  return target;
}

size_t GameParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dab.GameParameter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 number_of_vertical_columns = 1;
  if (this->number_of_vertical_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_vertical_columns());
  }

  // uint32 number_of_horizontal_columns = 2;
  if (this->number_of_horizontal_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_horizontal_columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dab.GameParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dab.GameParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dab.GameParameter)
    MergeFrom(*source);
  }
}

void GameParameter::MergeFrom(const GameParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dab.GameParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number_of_vertical_columns() != 0) {
    set_number_of_vertical_columns(from.number_of_vertical_columns());
  }
  if (from.number_of_horizontal_columns() != 0) {
    set_number_of_horizontal_columns(from.number_of_horizontal_columns());
  }
}

void GameParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dab.GameParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameParameter::CopyFrom(const GameParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dab.GameParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameParameter::IsInitialized() const {
  return true;
}

void GameParameter::Swap(GameParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameParameter::InternalSwap(GameParameter* other) {
  using std::swap;
  swap(number_of_vertical_columns_, other->number_of_vertical_columns_);
  swap(number_of_horizontal_columns_, other->number_of_horizontal_columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameParameter::GetMetadata() const {
  protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameTurn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameTurn::kVerticalFieldNumber;
const int GameTurn::kTargetColumnFieldNumber;
const int GameTurn::kTargetGapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameTurn::GameTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameTurn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dab.GameTurn)
}
GameTurn::GameTurn(const GameTurn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vertical_, &from.vertical_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_gap_) -
    reinterpret_cast<char*>(&vertical_)) + sizeof(target_gap_));
  // @@protoc_insertion_point(copy_constructor:dab.GameTurn)
}

void GameTurn::SharedCtor() {
  ::memset(&vertical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_gap_) -
      reinterpret_cast<char*>(&vertical_)) + sizeof(target_gap_));
}

GameTurn::~GameTurn() {
  // @@protoc_insertion_point(destructor:dab.GameTurn)
  SharedDtor();
}

void GameTurn::SharedDtor() {
}

void GameTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameTurn::descriptor() {
  ::protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameTurn& GameTurn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameTurn.base);
  return *internal_default_instance();
}


void GameTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:dab.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vertical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_gap_) -
      reinterpret_cast<char*>(&vertical_)) + sizeof(target_gap_));
  _internal_metadata_.Clear();
}

bool GameTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dab.GameTurn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool vertical = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_gap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dab.GameTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dab.GameTurn)
  return false;
#undef DO_
}

void GameTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dab.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool vertical = 1;
  if (this->vertical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->vertical(), output);
  }

  // uint32 target_column = 2;
  if (this->target_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_column(), output);
  }

  // uint32 target_gap = 3;
  if (this->target_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_gap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dab.GameTurn)
}

::google::protobuf::uint8* GameTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dab.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool vertical = 1;
  if (this->vertical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->vertical(), target);
  }

  // uint32 target_column = 2;
  if (this->target_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_column(), target);
  }

  // uint32 target_gap = 3;
  if (this->target_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_gap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dab.GameTurn)
  return target;
}

size_t GameTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dab.GameTurn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool vertical = 1;
  if (this->vertical() != 0) {
    total_size += 1 + 1;
  }

  // uint32 target_column = 2;
  if (this->target_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_column());
  }

  // uint32 target_gap = 3;
  if (this->target_gap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_gap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dab.GameTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dab.GameTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dab.GameTurn)
    MergeFrom(*source);
  }
}

void GameTurn::MergeFrom(const GameTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dab.GameTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vertical() != 0) {
    set_vertical(from.vertical());
  }
  if (from.target_column() != 0) {
    set_target_column(from.target_column());
  }
  if (from.target_gap() != 0) {
    set_target_gap(from.target_gap());
  }
}

void GameTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dab.GameTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTurn::CopyFrom(const GameTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dab.GameTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTurn::IsInitialized() const {
  return true;
}

void GameTurn::Swap(GameTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameTurn::InternalSwap(GameTurn* other) {
  using std::swap;
  swap(vertical_, other->vertical_);
  swap(target_column_, other->target_column_);
  swap(target_gap_, other->target_gap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameTurn::GetMetadata() const {
  protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kVerticalColumnsFieldNumber;
const int GameState::kHorizontalColumnsFieldNumber;
const int GameState::kVerticalLinesFieldNumber;
const int GameState::kHorizontalLinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dab.GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertical_lines_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vertical_lines().size() > 0) {
    vertical_lines_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_lines_);
  }
  horizontal_lines_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.horizontal_lines().size() > 0) {
    horizontal_lines_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.horizontal_lines_);
  }
  ::memcpy(&vertical_columns_, &from.vertical_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_columns_) -
    reinterpret_cast<char*>(&vertical_columns_)) + sizeof(horizontal_columns_));
  // @@protoc_insertion_point(copy_constructor:dab.GameState)
}

void GameState::SharedCtor() {
  vertical_lines_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horizontal_lines_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vertical_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_columns_) -
      reinterpret_cast<char*>(&vertical_columns_)) + sizeof(horizontal_columns_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:dab.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  vertical_lines_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horizontal_lines_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dots_2dand_2dboxes_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:dab.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertical_lines_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horizontal_lines_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vertical_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_columns_) -
      reinterpret_cast<char*>(&vertical_columns_)) + sizeof(horizontal_columns_));
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dab.GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 vertical_columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 horizontal_columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizontal_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes vertical_lines = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertical_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes horizontal_lines = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_horizontal_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dab.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dab.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dab.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertical_columns = 1;
  if (this->vertical_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vertical_columns(), output);
  }

  // uint32 horizontal_columns = 2;
  if (this->horizontal_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->horizontal_columns(), output);
  }

  // bytes vertical_lines = 3;
  if (this->vertical_lines().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vertical_lines(), output);
  }

  // bytes horizontal_lines = 4;
  if (this->horizontal_lines().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->horizontal_lines(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dab.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dab.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertical_columns = 1;
  if (this->vertical_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vertical_columns(), target);
  }

  // uint32 horizontal_columns = 2;
  if (this->horizontal_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->horizontal_columns(), target);
  }

  // bytes vertical_lines = 3;
  if (this->vertical_lines().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vertical_lines(), target);
  }

  // bytes horizontal_lines = 4;
  if (this->horizontal_lines().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->horizontal_lines(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dab.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dab.GameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes vertical_lines = 3;
  if (this->vertical_lines().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vertical_lines());
  }

  // bytes horizontal_lines = 4;
  if (this->horizontal_lines().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->horizontal_lines());
  }

  // uint32 vertical_columns = 1;
  if (this->vertical_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_columns());
  }

  // uint32 horizontal_columns = 2;
  if (this->horizontal_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dab.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dab.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dab.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dab.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vertical_lines().size() > 0) {

    vertical_lines_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertical_lines_);
  }
  if (from.horizontal_lines().size() > 0) {

    horizontal_lines_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.horizontal_lines_);
  }
  if (from.vertical_columns() != 0) {
    set_vertical_columns(from.vertical_columns());
  }
  if (from.horizontal_columns() != 0) {
    set_horizontal_columns(from.horizontal_columns());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dab.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dab.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  vertical_lines_.Swap(&other->vertical_lines_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  horizontal_lines_.Swap(&other->horizontal_lines_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vertical_columns_, other->vertical_columns_);
  swap(horizontal_columns_, other->horizontal_columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_dots_2dand_2dboxes_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dots_2dand_2dboxes_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dab
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dab::GameParameter* Arena::CreateMaybeMessage< ::dab::GameParameter >(Arena* arena) {
  return Arena::CreateInternal< ::dab::GameParameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dab::GameTurn* Arena::CreateMaybeMessage< ::dab::GameTurn >(Arena* arena) {
  return Arena::CreateInternal< ::dab::GameTurn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dab::GameState* Arena::CreateMaybeMessage< ::dab::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::dab::GameState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
