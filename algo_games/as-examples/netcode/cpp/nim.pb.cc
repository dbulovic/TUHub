// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nim.proto

#include "nim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace nim {
class GameParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameParameter>
      _instance;
} _GameParameter_default_instance_;
class GameTurnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameTurn>
      _instance;
} _GameTurn_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
}  // namespace nim
namespace protobuf_nim_2eproto {
static void InitDefaultsGameParameter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nim::_GameParameter_default_instance_;
    new (ptr) ::nim::GameParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nim::GameParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameParameter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameParameter}, {}};

static void InitDefaultsGameTurn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nim::_GameTurn_default_instance_;
    new (ptr) ::nim::GameTurn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nim::GameTurn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameTurn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameTurn}, {}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nim::_GameState_default_instance_;
    new (ptr) ::nim::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nim::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameState}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameParameter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameTurn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameParameter, number_of_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameParameter, number_of_stones_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameTurn, target_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameTurn, number_to_take_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nim::GameState, columns_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nim::GameParameter)},
  { 7, -1, sizeof(::nim::GameTurn)},
  { 14, -1, sizeof(::nim::GameState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nim::_GameParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nim::_GameTurn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nim::_GameState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "nim.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tnim.proto\022\003nim\"D\n\rGameParameter\022\031\n\021num"
      "ber_of_columns\030\001 \001(\r\022\030\n\020number_of_stones"
      "\030\002 \001(\r\"9\n\010GameTurn\022\025\n\rtarget_column\030\001 \001("
      "\r\022\026\n\016number_to_take\030\002 \001(\r\"\034\n\tGameState\022\017"
      "\n\007columns\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nim.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nim_2eproto
namespace nim {

// ===================================================================

void GameParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameParameter::kNumberOfColumnsFieldNumber;
const int GameParameter::kNumberOfStonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameParameter::GameParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nim_2eproto::scc_info_GameParameter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nim.GameParameter)
}
GameParameter::GameParameter(const GameParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_of_columns_, &from.number_of_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_stones_) -
    reinterpret_cast<char*>(&number_of_columns_)) + sizeof(number_of_stones_));
  // @@protoc_insertion_point(copy_constructor:nim.GameParameter)
}

void GameParameter::SharedCtor() {
  ::memset(&number_of_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_stones_) -
      reinterpret_cast<char*>(&number_of_columns_)) + sizeof(number_of_stones_));
}

GameParameter::~GameParameter() {
  // @@protoc_insertion_point(destructor:nim.GameParameter)
  SharedDtor();
}

void GameParameter::SharedDtor() {
}

void GameParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameParameter::descriptor() {
  ::protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameParameter& GameParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nim_2eproto::scc_info_GameParameter.base);
  return *internal_default_instance();
}


void GameParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:nim.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_of_columns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_stones_) -
      reinterpret_cast<char*>(&number_of_columns_)) + sizeof(number_of_stones_));
  _internal_metadata_.Clear();
}

bool GameParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nim.GameParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number_of_columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_stones = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_stones_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nim.GameParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nim.GameParameter)
  return false;
#undef DO_
}

void GameParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nim.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_columns = 1;
  if (this->number_of_columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_columns(), output);
  }

  // uint32 number_of_stones = 2;
  if (this->number_of_stones() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number_of_stones(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nim.GameParameter)
}

::google::protobuf::uint8* GameParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nim.GameParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_columns = 1;
  if (this->number_of_columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_columns(), target);
  }

  // uint32 number_of_stones = 2;
  if (this->number_of_stones() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_of_stones(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nim.GameParameter)
  return target;
}

size_t GameParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nim.GameParameter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 number_of_columns = 1;
  if (this->number_of_columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_columns());
  }

  // uint32 number_of_stones = 2;
  if (this->number_of_stones() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_stones());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nim.GameParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nim.GameParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nim.GameParameter)
    MergeFrom(*source);
  }
}

void GameParameter::MergeFrom(const GameParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nim.GameParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number_of_columns() != 0) {
    set_number_of_columns(from.number_of_columns());
  }
  if (from.number_of_stones() != 0) {
    set_number_of_stones(from.number_of_stones());
  }
}

void GameParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nim.GameParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameParameter::CopyFrom(const GameParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nim.GameParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameParameter::IsInitialized() const {
  return true;
}

void GameParameter::Swap(GameParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameParameter::InternalSwap(GameParameter* other) {
  using std::swap;
  swap(number_of_columns_, other->number_of_columns_);
  swap(number_of_stones_, other->number_of_stones_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameParameter::GetMetadata() const {
  protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameTurn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameTurn::kTargetColumnFieldNumber;
const int GameTurn::kNumberToTakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameTurn::GameTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nim_2eproto::scc_info_GameTurn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nim.GameTurn)
}
GameTurn::GameTurn(const GameTurn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_column_, &from.target_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_to_take_) -
    reinterpret_cast<char*>(&target_column_)) + sizeof(number_to_take_));
  // @@protoc_insertion_point(copy_constructor:nim.GameTurn)
}

void GameTurn::SharedCtor() {
  ::memset(&target_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_to_take_) -
      reinterpret_cast<char*>(&target_column_)) + sizeof(number_to_take_));
}

GameTurn::~GameTurn() {
  // @@protoc_insertion_point(destructor:nim.GameTurn)
  SharedDtor();
}

void GameTurn::SharedDtor() {
}

void GameTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameTurn::descriptor() {
  ::protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameTurn& GameTurn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nim_2eproto::scc_info_GameTurn.base);
  return *internal_default_instance();
}


void GameTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:nim.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_column_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_to_take_) -
      reinterpret_cast<char*>(&target_column_)) + sizeof(number_to_take_));
  _internal_metadata_.Clear();
}

bool GameTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nim.GameTurn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_column = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_to_take = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_to_take_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nim.GameTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nim.GameTurn)
  return false;
#undef DO_
}

void GameTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nim.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_column = 1;
  if (this->target_column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_column(), output);
  }

  // uint32 number_to_take = 2;
  if (this->number_to_take() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number_to_take(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nim.GameTurn)
}

::google::protobuf::uint8* GameTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nim.GameTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_column = 1;
  if (this->target_column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_column(), target);
  }

  // uint32 number_to_take = 2;
  if (this->number_to_take() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_to_take(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nim.GameTurn)
  return target;
}

size_t GameTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nim.GameTurn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_column = 1;
  if (this->target_column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_column());
  }

  // uint32 number_to_take = 2;
  if (this->number_to_take() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_to_take());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nim.GameTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const GameTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nim.GameTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nim.GameTurn)
    MergeFrom(*source);
  }
}

void GameTurn::MergeFrom(const GameTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nim.GameTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_column() != 0) {
    set_target_column(from.target_column());
  }
  if (from.number_to_take() != 0) {
    set_number_to_take(from.number_to_take());
  }
}

void GameTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nim.GameTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTurn::CopyFrom(const GameTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nim.GameTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTurn::IsInitialized() const {
  return true;
}

void GameTurn::Swap(GameTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameTurn::InternalSwap(GameTurn* other) {
  using std::swap;
  swap(target_column_, other->target_column_);
  swap(number_to_take_, other->number_to_take_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameTurn::GetMetadata() const {
  protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nim_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:nim.GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  columns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.columns().size() > 0) {
    columns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columns_);
  }
  // @@protoc_insertion_point(copy_constructor:nim.GameState)
}

void GameState::SharedCtor() {
  columns_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:nim.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  columns_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nim_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:nim.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nim.GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columns().data(), static_cast<int>(this->columns().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nim.GameState.columns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nim.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nim.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nim.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string columns = 1;
  if (this->columns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns().data(), static_cast<int>(this->columns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nim.GameState.columns");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->columns(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nim.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nim.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string columns = 1;
  if (this->columns().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns().data(), static_cast<int>(this->columns().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nim.GameState.columns");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->columns(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nim.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nim.GameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string columns = 1;
  if (this->columns().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nim.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nim.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nim.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nim.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.columns().size() > 0) {

    columns_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.columns_);
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nim.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nim.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  columns_.Swap(&other->columns_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_nim_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nim_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nim
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nim::GameParameter* Arena::CreateMaybeMessage< ::nim::GameParameter >(Arena* arena) {
  return Arena::CreateInternal< ::nim::GameParameter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nim::GameTurn* Arena::CreateMaybeMessage< ::nim::GameTurn >(Arena* arena) {
  return Arena::CreateInternal< ::nim::GameTurn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::nim::GameState* Arena::CreateMaybeMessage< ::nim::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::nim::GameState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
