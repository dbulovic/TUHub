// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nim.proto

#ifndef PROTOBUF_INCLUDED_nim_2eproto
#define PROTOBUF_INCLUDED_nim_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nim_2eproto 

namespace protobuf_nim_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nim_2eproto
namespace nim {
class GameParameter;
class GameParameterDefaultTypeInternal;
extern GameParameterDefaultTypeInternal _GameParameter_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class GameTurn;
class GameTurnDefaultTypeInternal;
extern GameTurnDefaultTypeInternal _GameTurn_default_instance_;
}  // namespace nim
namespace google {
namespace protobuf {
template<> ::nim::GameParameter* Arena::CreateMaybeMessage<::nim::GameParameter>(Arena*);
template<> ::nim::GameState* Arena::CreateMaybeMessage<::nim::GameState>(Arena*);
template<> ::nim::GameTurn* Arena::CreateMaybeMessage<::nim::GameTurn>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nim {

// ===================================================================

class GameParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nim.GameParameter) */ {
 public:
  GameParameter();
  virtual ~GameParameter();

  GameParameter(const GameParameter& from);

  inline GameParameter& operator=(const GameParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameParameter(GameParameter&& from) noexcept
    : GameParameter() {
    *this = ::std::move(from);
  }

  inline GameParameter& operator=(GameParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameParameter* internal_default_instance() {
    return reinterpret_cast<const GameParameter*>(
               &_GameParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameParameter* other);
  friend void swap(GameParameter& a, GameParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameParameter* New() const final {
    return CreateMaybeMessage<GameParameter>(NULL);
  }

  GameParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameParameter& from);
  void MergeFrom(const GameParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 number_of_columns = 1;
  void clear_number_of_columns();
  static const int kNumberOfColumnsFieldNumber = 1;
  ::google::protobuf::uint32 number_of_columns() const;
  void set_number_of_columns(::google::protobuf::uint32 value);

  // uint32 number_of_stones = 2;
  void clear_number_of_stones();
  static const int kNumberOfStonesFieldNumber = 2;
  ::google::protobuf::uint32 number_of_stones() const;
  void set_number_of_stones(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nim.GameParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 number_of_columns_;
  ::google::protobuf::uint32 number_of_stones_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nim_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameTurn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nim.GameTurn) */ {
 public:
  GameTurn();
  virtual ~GameTurn();

  GameTurn(const GameTurn& from);

  inline GameTurn& operator=(const GameTurn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameTurn(GameTurn&& from) noexcept
    : GameTurn() {
    *this = ::std::move(from);
  }

  inline GameTurn& operator=(GameTurn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTurn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTurn* internal_default_instance() {
    return reinterpret_cast<const GameTurn*>(
               &_GameTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameTurn* other);
  friend void swap(GameTurn& a, GameTurn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameTurn* New() const final {
    return CreateMaybeMessage<GameTurn>(NULL);
  }

  GameTurn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameTurn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameTurn& from);
  void MergeFrom(const GameTurn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTurn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 target_column = 1;
  void clear_target_column();
  static const int kTargetColumnFieldNumber = 1;
  ::google::protobuf::uint32 target_column() const;
  void set_target_column(::google::protobuf::uint32 value);

  // uint32 number_to_take = 2;
  void clear_number_to_take();
  static const int kNumberToTakeFieldNumber = 2;
  ::google::protobuf::uint32 number_to_take() const;
  void set_number_to_take(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:nim.GameTurn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_column_;
  ::google::protobuf::uint32 number_to_take_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nim_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nim.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string columns = 1;
  void clear_columns();
  static const int kColumnsFieldNumber = 1;
  const ::std::string& columns() const;
  void set_columns(const ::std::string& value);
  #if LANG_CXX11
  void set_columns(::std::string&& value);
  #endif
  void set_columns(const char* value);
  void set_columns(const char* value, size_t size);
  ::std::string* mutable_columns();
  ::std::string* release_columns();
  void set_allocated_columns(::std::string* columns);

  // @@protoc_insertion_point(class_scope:nim.GameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr columns_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nim_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameParameter

// uint32 number_of_columns = 1;
inline void GameParameter::clear_number_of_columns() {
  number_of_columns_ = 0u;
}
inline ::google::protobuf::uint32 GameParameter::number_of_columns() const {
  // @@protoc_insertion_point(field_get:nim.GameParameter.number_of_columns)
  return number_of_columns_;
}
inline void GameParameter::set_number_of_columns(::google::protobuf::uint32 value) {
  
  number_of_columns_ = value;
  // @@protoc_insertion_point(field_set:nim.GameParameter.number_of_columns)
}

// uint32 number_of_stones = 2;
inline void GameParameter::clear_number_of_stones() {
  number_of_stones_ = 0u;
}
inline ::google::protobuf::uint32 GameParameter::number_of_stones() const {
  // @@protoc_insertion_point(field_get:nim.GameParameter.number_of_stones)
  return number_of_stones_;
}
inline void GameParameter::set_number_of_stones(::google::protobuf::uint32 value) {
  
  number_of_stones_ = value;
  // @@protoc_insertion_point(field_set:nim.GameParameter.number_of_stones)
}

// -------------------------------------------------------------------

// GameTurn

// uint32 target_column = 1;
inline void GameTurn::clear_target_column() {
  target_column_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::target_column() const {
  // @@protoc_insertion_point(field_get:nim.GameTurn.target_column)
  return target_column_;
}
inline void GameTurn::set_target_column(::google::protobuf::uint32 value) {
  
  target_column_ = value;
  // @@protoc_insertion_point(field_set:nim.GameTurn.target_column)
}

// uint32 number_to_take = 2;
inline void GameTurn::clear_number_to_take() {
  number_to_take_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::number_to_take() const {
  // @@protoc_insertion_point(field_get:nim.GameTurn.number_to_take)
  return number_to_take_;
}
inline void GameTurn::set_number_to_take(::google::protobuf::uint32 value) {
  
  number_to_take_ = value;
  // @@protoc_insertion_point(field_set:nim.GameTurn.number_to_take)
}

// -------------------------------------------------------------------

// GameState

// string columns = 1;
inline void GameState::clear_columns() {
  columns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameState::columns() const {
  // @@protoc_insertion_point(field_get:nim.GameState.columns)
  return columns_.GetNoArena();
}
inline void GameState::set_columns(const ::std::string& value) {
  
  columns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nim.GameState.columns)
}
#if LANG_CXX11
inline void GameState::set_columns(::std::string&& value) {
  
  columns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nim.GameState.columns)
}
#endif
inline void GameState::set_columns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  columns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nim.GameState.columns)
}
inline void GameState::set_columns(const char* value, size_t size) {
  
  columns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nim.GameState.columns)
}
inline ::std::string* GameState::mutable_columns() {
  
  // @@protoc_insertion_point(field_mutable:nim.GameState.columns)
  return columns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameState::release_columns() {
  // @@protoc_insertion_point(field_release:nim.GameState.columns)
  
  return columns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameState::set_allocated_columns(::std::string* columns) {
  if (columns != NULL) {
    
  } else {
    
  }
  columns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), columns);
  // @@protoc_insertion_point(field_set_allocated:nim.GameState.columns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nim

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nim_2eproto
