// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dominect.proto

#ifndef PROTOBUF_INCLUDED_dominect_2eproto
#define PROTOBUF_INCLUDED_dominect_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dominect_2eproto 

namespace protobuf_dominect_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dominect_2eproto
namespace dom {
class GameParameter;
class GameParameterDefaultTypeInternal;
extern GameParameterDefaultTypeInternal _GameParameter_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class GameTurn;
class GameTurnDefaultTypeInternal;
extern GameTurnDefaultTypeInternal _GameTurn_default_instance_;
}  // namespace dom
namespace google {
namespace protobuf {
template<> ::dom::GameParameter* Arena::CreateMaybeMessage<::dom::GameParameter>(Arena*);
template<> ::dom::GameState* Arena::CreateMaybeMessage<::dom::GameState>(Arena*);
template<> ::dom::GameTurn* Arena::CreateMaybeMessage<::dom::GameTurn>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dom {

// ===================================================================

class GameParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dom.GameParameter) */ {
 public:
  GameParameter();
  virtual ~GameParameter();

  GameParameter(const GameParameter& from);

  inline GameParameter& operator=(const GameParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameParameter(GameParameter&& from) noexcept
    : GameParameter() {
    *this = ::std::move(from);
  }

  inline GameParameter& operator=(GameParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameParameter* internal_default_instance() {
    return reinterpret_cast<const GameParameter*>(
               &_GameParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameParameter* other);
  friend void swap(GameParameter& a, GameParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameParameter* New() const final {
    return CreateMaybeMessage<GameParameter>(NULL);
  }

  GameParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameParameter& from);
  void MergeFrom(const GameParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 board_width = 1;
  void clear_board_width();
  static const int kBoardWidthFieldNumber = 1;
  ::google::protobuf::uint32 board_width() const;
  void set_board_width(::google::protobuf::uint32 value);

  // uint32 board_height = 2;
  void clear_board_height();
  static const int kBoardHeightFieldNumber = 2;
  ::google::protobuf::uint32 board_height() const;
  void set_board_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dom.GameParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 board_width_;
  ::google::protobuf::uint32 board_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dominect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameTurn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dom.GameTurn) */ {
 public:
  GameTurn();
  virtual ~GameTurn();

  GameTurn(const GameTurn& from);

  inline GameTurn& operator=(const GameTurn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameTurn(GameTurn&& from) noexcept
    : GameTurn() {
    *this = ::std::move(from);
  }

  inline GameTurn& operator=(GameTurn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTurn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTurn* internal_default_instance() {
    return reinterpret_cast<const GameTurn*>(
               &_GameTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameTurn* other);
  friend void swap(GameTurn& a, GameTurn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameTurn* New() const final {
    return CreateMaybeMessage<GameTurn>(NULL);
  }

  GameTurn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameTurn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameTurn& from);
  void MergeFrom(const GameTurn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTurn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x1 = 1;
  void clear_x1();
  static const int kX1FieldNumber = 1;
  ::google::protobuf::uint32 x1() const;
  void set_x1(::google::protobuf::uint32 value);

  // uint32 y1 = 2;
  void clear_y1();
  static const int kY1FieldNumber = 2;
  ::google::protobuf::uint32 y1() const;
  void set_y1(::google::protobuf::uint32 value);

  // uint32 x2 = 3;
  void clear_x2();
  static const int kX2FieldNumber = 3;
  ::google::protobuf::uint32 x2() const;
  void set_x2(::google::protobuf::uint32 value);

  // uint32 y2 = 4;
  void clear_y2();
  static const int kY2FieldNumber = 4;
  ::google::protobuf::uint32 y2() const;
  void set_y2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dom.GameTurn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x1_;
  ::google::protobuf::uint32 y1_;
  ::google::protobuf::uint32 x2_;
  ::google::protobuf::uint32 y2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dominect_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dom.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes board_data = 3;
  void clear_board_data();
  static const int kBoardDataFieldNumber = 3;
  const ::std::string& board_data() const;
  void set_board_data(const ::std::string& value);
  #if LANG_CXX11
  void set_board_data(::std::string&& value);
  #endif
  void set_board_data(const char* value);
  void set_board_data(const void* value, size_t size);
  ::std::string* mutable_board_data();
  ::std::string* release_board_data();
  void set_allocated_board_data(::std::string* board_data);

  // uint32 board_width = 1;
  void clear_board_width();
  static const int kBoardWidthFieldNumber = 1;
  ::google::protobuf::uint32 board_width() const;
  void set_board_width(::google::protobuf::uint32 value);

  // uint32 board_height = 2;
  void clear_board_height();
  static const int kBoardHeightFieldNumber = 2;
  ::google::protobuf::uint32 board_height() const;
  void set_board_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dom.GameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr board_data_;
  ::google::protobuf::uint32 board_width_;
  ::google::protobuf::uint32 board_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dominect_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameParameter

// uint32 board_width = 1;
inline void GameParameter::clear_board_width() {
  board_width_ = 0u;
}
inline ::google::protobuf::uint32 GameParameter::board_width() const {
  // @@protoc_insertion_point(field_get:dom.GameParameter.board_width)
  return board_width_;
}
inline void GameParameter::set_board_width(::google::protobuf::uint32 value) {
  
  board_width_ = value;
  // @@protoc_insertion_point(field_set:dom.GameParameter.board_width)
}

// uint32 board_height = 2;
inline void GameParameter::clear_board_height() {
  board_height_ = 0u;
}
inline ::google::protobuf::uint32 GameParameter::board_height() const {
  // @@protoc_insertion_point(field_get:dom.GameParameter.board_height)
  return board_height_;
}
inline void GameParameter::set_board_height(::google::protobuf::uint32 value) {
  
  board_height_ = value;
  // @@protoc_insertion_point(field_set:dom.GameParameter.board_height)
}

// -------------------------------------------------------------------

// GameTurn

// uint32 x1 = 1;
inline void GameTurn::clear_x1() {
  x1_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::x1() const {
  // @@protoc_insertion_point(field_get:dom.GameTurn.x1)
  return x1_;
}
inline void GameTurn::set_x1(::google::protobuf::uint32 value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:dom.GameTurn.x1)
}

// uint32 y1 = 2;
inline void GameTurn::clear_y1() {
  y1_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::y1() const {
  // @@protoc_insertion_point(field_get:dom.GameTurn.y1)
  return y1_;
}
inline void GameTurn::set_y1(::google::protobuf::uint32 value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:dom.GameTurn.y1)
}

// uint32 x2 = 3;
inline void GameTurn::clear_x2() {
  x2_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::x2() const {
  // @@protoc_insertion_point(field_get:dom.GameTurn.x2)
  return x2_;
}
inline void GameTurn::set_x2(::google::protobuf::uint32 value) {
  
  x2_ = value;
  // @@protoc_insertion_point(field_set:dom.GameTurn.x2)
}

// uint32 y2 = 4;
inline void GameTurn::clear_y2() {
  y2_ = 0u;
}
inline ::google::protobuf::uint32 GameTurn::y2() const {
  // @@protoc_insertion_point(field_get:dom.GameTurn.y2)
  return y2_;
}
inline void GameTurn::set_y2(::google::protobuf::uint32 value) {
  
  y2_ = value;
  // @@protoc_insertion_point(field_set:dom.GameTurn.y2)
}

// -------------------------------------------------------------------

// GameState

// uint32 board_width = 1;
inline void GameState::clear_board_width() {
  board_width_ = 0u;
}
inline ::google::protobuf::uint32 GameState::board_width() const {
  // @@protoc_insertion_point(field_get:dom.GameState.board_width)
  return board_width_;
}
inline void GameState::set_board_width(::google::protobuf::uint32 value) {
  
  board_width_ = value;
  // @@protoc_insertion_point(field_set:dom.GameState.board_width)
}

// uint32 board_height = 2;
inline void GameState::clear_board_height() {
  board_height_ = 0u;
}
inline ::google::protobuf::uint32 GameState::board_height() const {
  // @@protoc_insertion_point(field_get:dom.GameState.board_height)
  return board_height_;
}
inline void GameState::set_board_height(::google::protobuf::uint32 value) {
  
  board_height_ = value;
  // @@protoc_insertion_point(field_set:dom.GameState.board_height)
}

// bytes board_data = 3;
inline void GameState::clear_board_data() {
  board_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameState::board_data() const {
  // @@protoc_insertion_point(field_get:dom.GameState.board_data)
  return board_data_.GetNoArena();
}
inline void GameState::set_board_data(const ::std::string& value) {
  
  board_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom.GameState.board_data)
}
#if LANG_CXX11
inline void GameState::set_board_data(::std::string&& value) {
  
  board_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom.GameState.board_data)
}
#endif
inline void GameState::set_board_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  board_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom.GameState.board_data)
}
inline void GameState::set_board_data(const void* value, size_t size) {
  
  board_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom.GameState.board_data)
}
inline ::std::string* GameState::mutable_board_data() {
  
  // @@protoc_insertion_point(field_mutable:dom.GameState.board_data)
  return board_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameState::release_board_data() {
  // @@protoc_insertion_point(field_release:dom.GameState.board_data)
  
  return board_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameState::set_allocated_board_data(::std::string* board_data) {
  if (board_data != NULL) {
    
  } else {
    
  }
  board_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), board_data);
  // @@protoc_insertion_point(field_set_allocated:dom.GameState.board_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dominect_2eproto
